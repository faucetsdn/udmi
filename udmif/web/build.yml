cache:
  key: web-${CI_COMMIT_REF_SLUG}
  paths:
    - udmif/web/node_modules/
    - udmif/web/dist/

include:
  - project: 'buildings-iot/templates/cicd_pipelines'
    ref: main
    file: node16.yml

stages:
  - build
  - test
  - static-scan
  - publish-docker
  - deploy-staging
  
build-node:
  script:
    - npm install
    - npm install -g @angular/cli
    - npm run build

sonarqube-scan:
  rules:
    - when: never

scan-docker:
  rules:
    - when: never

build-docker:
  variables: 
    BUILD_DIR: $CI_PROJECT_DIR/udmif/web

publish-docker:
  variables: 
    VERSION: $CI_PIPELINE_IID
    DOCKER_REGISTRY_IMAGE: $CI_REGISTRY_IMAGE/udmif-web
    BUILD_DIR: $CI_PROJECT_DIR/udmif/web
    
test-node:
  stage: test
  rules:
    - when: never

deploy-staging:
  extends: .gks-deploy
  stage: deploy-staging
  environment: staging
  variables:
    NAMESPACE: udmi
    CHART_NAME: udmi-web
    HELM_REPO: udmif/helm
    CHART_VALUES: --set image.tag=$CI_PIPELINE_IID --set image.repository=registry.gitlab.com/buildings-iot/udmi/udmif-web --set dockerSecret.accessToken=$GITLAB_REGISTRY_TOKEN --create-namespace --set dockerSecret.registry=$GITLAB_REGISTRY_URL --set dockerSecret.username=gitlab --set dockerSecret.create=true --set env.GOOGLE_CLIENT_ID=$GOOGLE_CLIENT_ID

deploy-ingress-staging:
  extends: .gks-deploy
  stage: deploy-staging
  environment: staging
  script:
    - sed -E < udmif/ingress.yaml > ingress.yaml \-e "s/@HOST_NAME@/${HOST_NAME}/"
    - kubectl apply -f ingress.yaml -n udmi
  rules:
      - if: $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH
        when: manual
        allow_failure: true

