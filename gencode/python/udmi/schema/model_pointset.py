# generated by datamodel-codegen:
#   filename:  model_pointset.json
#   timestamp: 2025-01-31T07:45:30+00:00

from __future__ import annotations

from typing import Dict, Optional

from pydantic import BaseModel, ConfigDict, Field, conint, constr

from .model_pointset_point import PointPointsetModel


class PointsetModel(BaseModel):
    """
    Pointset representing the abstract system expectation for what the device should be doing, and how it should be configured and operated. This block specifies the expected points that a device holds
    """

    model_config = ConfigDict(
        extra='forbid',
    )
    points: Optional[
        Dict[constr(pattern=r'^[a-z][a-z0-9]*(_[a-z0-9]+)*$'), PointPointsetModel]
    ] = Field(
        None, description='Information about a specific point name of the device.'
    )
    exclude_units_from_config: Optional[bool] = None
    exclude_points_from_config: Optional[bool] = None
    sample_limit_sec: Optional[conint(ge=0, le=86400)] = Field(
        None,
        description='Minimum time between sample updates for the device (including complete and COV updates). Updates more frequent than this should be coalesced into one update.',
    )
    sample_rate_sec: Optional[conint(ge=1, le=86400)] = Field(
        None,
        description='Maximum time between samples for the device to send out a complete update. It can send out updates more frequently than this. Default to 600.',
    )
