# generated by datamodel-codegen:
#   filename:  state_udmi.json
#   timestamp: 2025-01-31T07:45:30+00:00

from __future__ import annotations

from datetime import datetime
from typing import Dict, Optional

from pydantic import BaseModel, ConfigDict, Field, constr


class Setup(BaseModel):
    user: Optional[str] = Field(
        None, description='User id of the person running the tool'
    )
    udmi_version: Optional[str] = Field(
        None, description='Semantic tagged version of udmis install'
    )
    functions_ver: Optional[int] = Field(
        None, description='Version of the function interface used by this client'
    )
    udmi_commit: Optional[str] = Field(
        None, description='Commit hash of this udmis install'
    )
    udmi_ref: Optional[str] = Field(
        None, description='Complete reference of udmis install'
    )
    udmi_timever: Optional[str] = Field(
        None, description='Timestamp version id of udmis install'
    )
    msg_source: Optional[str] = Field(
        None, description='Source parameter to use for this connection stream'
    )
    update_to: Optional[str] = Field(
        None, description='Optional version for a udmis update trigger'
    )
    tool_name: Optional[str] = Field(None, description='Name of the tool being used')
    transaction_id: Optional[str] = None


class UdmiState(BaseModel):
    """
    State of a UDMI reflector client
    """

    model_config = ConfigDict(
        extra='forbid',
    )
    timestamp: Optional[datetime] = Field(
        None,
        description='RFC 3339 Timestamp the state payload was generated',
        examples=['2019-01-17T14:02:29.364Z'],
    )
    version: Optional[str] = Field(None, description='Version of the UDMI schema')
    source: Optional[str] = Field(
        None, description='Indicator of where this source update came from'
    )
    regions: Optional[Dict[constr(pattern=r'^[A-Z-]+$'), str]] = Field(
        None, title='Regions Udmi State'
    )
    setup: Optional[Setup] = Field(None, title='Setup Udmi State')
