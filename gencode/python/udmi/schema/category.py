# generated by datamodel-codegen:
#   filename:  category.json
#   timestamp: 2025-01-31T07:45:30+00:00

from __future__ import annotations

from typing import Optional, Union

from pydantic import Field, RootModel, constr


class Category(
    RootModel[
        Optional[
            Union[
                constr(pattern=r'^system\.base\.start$'),
                constr(pattern=r'^system\.base\.shutdown$'),
                constr(pattern=r'^system\.base\.ready$'),
                constr(pattern=r'^system\.config\.receive$'),
                constr(pattern=r'^system\.config\.parse$'),
                constr(pattern=r'^system\.config\.apply$'),
                constr(pattern=r'^system\.auth\.login$'),
                constr(pattern=r'^system\.auth\.logout$'),
                constr(pattern=r'^system\.auth\.fail$'),
                constr(pattern=r'^pointset\.point\.nominal$'),
                constr(pattern=r'^pointset\.point\.applied$'),
                constr(pattern=r'^pointset\.point\.updating$'),
                constr(pattern=r'^pointset\.point\.overridden$'),
                constr(pattern=r'^pointset\.point\.failure$'),
                constr(pattern=r'^pointset\.point\.invalid$'),
                constr(pattern=r'^localnet\.network$'),
                constr(pattern=r'^localnet\.network\.connect$'),
                constr(pattern=r'^gateway\.setup\.attach$'),
                constr(pattern=r'^gateway\.proxy\.target$'),
                constr(pattern=r'^gateway\.proxy\.connect$'),
                constr(pattern=r'^discovery\.family\.scan$'),
                constr(pattern=r'^discovery\.device\.enumerate$'),
                constr(pattern=r'^discovery\.point\.describe$'),
                constr(pattern=r'^mapping\.device\.apply$'),
                constr(pattern=r'^blobset\.blob\.receive$'),
                constr(pattern=r'^blobset\.blob\.fetch$'),
                constr(pattern=r'^blobset\.blob\.apply$'),
                constr(pattern=r'^validation\.device\.receive$'),
                constr(pattern=r'^validation\.device\.schema$'),
                constr(pattern=r'^validation\.device\.content$'),
                constr(pattern=r'^validation\.device\.multiple$'),
                constr(pattern=r'^validation\.device\.extra$'),
                constr(pattern=r'^validation\.summary\.report$'),
                constr(pattern=r'^validation\.feature\.sequence$'),
                constr(pattern=r'^validation\.feature\.schema$'),
                constr(pattern=r'^validation\.feature\.capability$'),
                constr(pattern=r'^device(\.[a-z]+((_[a-z]+))*)+$'),
            ]
        ]
    ]
):
    root: Optional[
        Union[
            constr(pattern=r'^system\.base\.start$'),
            constr(pattern=r'^system\.base\.shutdown$'),
            constr(pattern=r'^system\.base\.ready$'),
            constr(pattern=r'^system\.config\.receive$'),
            constr(pattern=r'^system\.config\.parse$'),
            constr(pattern=r'^system\.config\.apply$'),
            constr(pattern=r'^system\.auth\.login$'),
            constr(pattern=r'^system\.auth\.logout$'),
            constr(pattern=r'^system\.auth\.fail$'),
            constr(pattern=r'^pointset\.point\.nominal$'),
            constr(pattern=r'^pointset\.point\.applied$'),
            constr(pattern=r'^pointset\.point\.updating$'),
            constr(pattern=r'^pointset\.point\.overridden$'),
            constr(pattern=r'^pointset\.point\.failure$'),
            constr(pattern=r'^pointset\.point\.invalid$'),
            constr(pattern=r'^localnet\.network$'),
            constr(pattern=r'^localnet\.network\.connect$'),
            constr(pattern=r'^gateway\.setup\.attach$'),
            constr(pattern=r'^gateway\.proxy\.target$'),
            constr(pattern=r'^gateway\.proxy\.connect$'),
            constr(pattern=r'^discovery\.family\.scan$'),
            constr(pattern=r'^discovery\.device\.enumerate$'),
            constr(pattern=r'^discovery\.point\.describe$'),
            constr(pattern=r'^mapping\.device\.apply$'),
            constr(pattern=r'^blobset\.blob\.receive$'),
            constr(pattern=r'^blobset\.blob\.fetch$'),
            constr(pattern=r'^blobset\.blob\.apply$'),
            constr(pattern=r'^validation\.device\.receive$'),
            constr(pattern=r'^validation\.device\.schema$'),
            constr(pattern=r'^validation\.device\.content$'),
            constr(pattern=r'^validation\.device\.multiple$'),
            constr(pattern=r'^validation\.device\.extra$'),
            constr(pattern=r'^validation\.summary\.report$'),
            constr(pattern=r'^validation\.feature\.sequence$'),
            constr(pattern=r'^validation\.feature\.schema$'),
            constr(pattern=r'^validation\.feature\.capability$'),
            constr(pattern=r'^device(\.[a-z]+((_[a-z]+))*)+$'),
        ]
    ] = Field(None, title='Category')
