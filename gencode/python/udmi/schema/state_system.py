# generated by datamodel-codegen:
#   filename:  state_system.json

from __future__ import annotations

from datetime import datetime
from typing import Dict, Optional

from pydantic import BaseModel, ConfigDict, Field, constr

from .entry import Entry
from .state_system_hardware import StateSystemHardware
from .state_system_operation import StateSystemOperation


class SystemState(BaseModel):
    """
    [System State Documentation](../docs/messages/system.md#state)
    """

    model_config = ConfigDict(
        extra='forbid',
    )
    timestamp: Optional[datetime] = Field(
        None,
        description='Not included in messages published by devices. Part of message subblocks within cloud pipeline. RFC 3339 Timestamp the payload was generated',
        examples=['2019-01-17T14:02:29.364Z'],
    )
    version: Optional[str] = Field(None, description='Version of the UDMI schema')
    last_config: Optional[datetime] = Field(
        None,
        description='Time from the `timestamp` field of the last successfully parsed `config` message (not the timestamp the message was received/processed). Part of the [config state sequence](../docs/specs/sequences/config.md)',
        examples=['2019-01-17T14:02:29.364Z'],
    )
    operation: Optional[StateSystemOperation] = None
    serial_no: Optional[str] = Field(
        None,
        description='The serial number of the physical device',
        examples=['A1B2C3D4', '00001'],
    )
    hardware: Optional[StateSystemHardware] = None
    software: Optional[Dict[constr(pattern=r'^[a-z_]+$'), str]] = Field(
        None,
        description='A collection of items which can be used to describe version of software running on a device',
        examples=['firmware', 'os', 'driver'],
    )
    params: Optional[Dict[constr(pattern=r'^[a-z_]+$'), str]] = None
    status: Optional[Entry] = None
    upgraded_from: Optional[str] = Field(
        None, description='Original version of schema pre-upgrade'
    )
