# generated by datamodel-codegen:
#   filename:  state_pointset.json
#   timestamp: 2025-01-31T07:45:30+00:00

from __future__ import annotations

from datetime import datetime
from typing import Dict, Optional

from pydantic import BaseModel, ConfigDict, Field, constr

from .entry import Entry
from .state_pointset_point import PointPointsetState


class PointsetState(BaseModel):
    """
    A set of points reporting telemetry data.
    """

    model_config = ConfigDict(
        extra='forbid',
    )
    timestamp: Optional[datetime] = Field(
        None,
        description='Not included in messages published by devices. Part of message subblocks within cloud pipeline. RFC 3339 Timestamp the payload was generated',
        examples=['2019-01-17T14:02:29.364Z'],
    )
    version: Optional[str] = Field(
        None,
        description='Version of the UDMI schema, not included in messages published by devices',
    )
    state_etag: Optional[constr(max_length=32)] = Field(
        None,
        description='An identifier which uniquely represents the state, and used by a device avoid race conditions where the incoming config is based off an obsolete state. [Additional information on implementation](../docs/specs/sequences/writeback.md)',
    )
    status: Optional[Entry] = Field(
        None, description='Optional status information about pointset'
    )
    points: Optional[
        Dict[constr(pattern=r'^[a-z][a-z0-9]*(_[a-z0-9]+)*$'), PointPointsetState]
    ] = Field(
        None,
        description='Collection of point names, defining the representative point set for this device.',
    )
    upgraded_from: Optional[str] = Field(
        None, description='Original version of schema pre-upgrade'
    )
