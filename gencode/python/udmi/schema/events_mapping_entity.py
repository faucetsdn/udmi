# generated by datamodel-codegen:
#   filename:  events_mapping_entity.json
#   timestamp: 2025-01-31T07:45:30+00:00

from __future__ import annotations

from enum import Enum
from typing import Dict, List, Optional

from pydantic import BaseModel, ConfigDict, Field, constr

from .equipment_translation import BuildingConfig
from .virtual_links import VirtualEquipmentLinks


class Connections(Enum):
    CONTAINS = 'CONTAINS'


class MappingEventEntity(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    code: Optional[constr(pattern=r'^[-_A-Za-z0-9]+$')] = Field(
        None,
        description='Human readable code for the entity, should be unique in the document scope',
        examples=['fcu-8_1'],
    )
    type: Optional[constr(pattern=r'^([_A-Z]+/)?[_A-Z]+$')] = Field(
        None,
        description='DBO namespace and entity type',
        examples=['HVAC/FCU_DFSS_DSP_CHWZC'],
    )
    cloud_device_id: Optional[constr(pattern=r'^[0-9]+$')] = Field(
        None, description='Opaque identifier for the entity', examples=['3607425']
    )
    connections: Optional[Dict[constr(pattern=r'^[-0-9a-z]+$'), Connections]] = Field(
        None,
        description='Entity connections, keyed by guid',
        examples=[{'dea1fcd5-6942-47a2-ba75-448a7ed47fd7': 'CONTAINS'}],
    )
    links: Optional[VirtualEquipmentLinks] = None
    translation: Optional[BuildingConfig] = None
    missing_telemetry_fields: Optional[List[constr(pattern=r'^[a-z_]+$')]] = Field(
        None,
        description='DBO fields which are required by the type but absent from the translation',
        examples=[['discharge_fan_run_command', 'discharge_fan_run_status']],
    )
