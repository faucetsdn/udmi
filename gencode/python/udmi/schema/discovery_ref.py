# generated by datamodel-codegen:
#   filename:  discovery_ref.json

from __future__ import annotations

from typing import List, Optional

from pydantic import BaseModel, ConfigDict, Field, constr

from .ancillary_properties import AncillaryProperties
from .entry import Entry


class RefDiscovery(BaseModel):
    """
    Object representation for for a single point reference discovery
    """

    model_config = ConfigDict(
        extra='forbid',
    )
    point: Optional[constr(pattern=r'^[a-z][a-z0-9]*(_[a-z0-9]+)*$')] = Field(
        None, description='Point descriptor for this point'
    )
    name: Optional[str] = Field(
        None, description='Friendly name for the reference, if known'
    )
    possible_values: Optional[List[str]] = Field(
        None, description='List of possible enumerated values for the point'
    )
    units: Optional[str] = Field(
        None, description='Current or default unit for this point'
    )
    type: Optional[str] = Field(
        None, description='Current or default type for this point'
    )
    writable: Optional[bool] = Field(
        None, description='Indicates if this point is writable or not'
    )
    description: Optional[str] = Field(
        None, description='Human-readable description of this point'
    )
    status: Optional[Entry] = None
    ancillary: Optional[AncillaryProperties] = None
