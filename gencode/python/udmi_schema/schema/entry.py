# generated by datamodel-codegen:
#   filename:  entry.json

from __future__ import annotations

from datetime import datetime
from typing import Optional

from pydantic import BaseModel, ConfigDict, Field, conint

from .category import Category


class Entry(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    message: Optional[str] = Field(
        None,
        description='A human-readable one-line description of the entry',
        examples=['Point is not writable'],
    )
    detail: Optional[str] = Field(
        None,
        description='An optional extensive entry which can include more detail, e.g. a complete program stack-trace',
    )
    category: Optional[Category] = None
    timestamp: Optional[datetime] = Field(
        None,
        description='FC 3339 UTC timestamp the condition was triggered, or most recently updated',
        examples=['2018-08-26T21:39:28.364Z'],
    )
    level: Optional[conint(ge=100, le=800, multiple_of=1)] = Field(
        None,
        description='The status `level` should conform to the numerical [Stackdriver LogEntry](https://cloud.google.com/logging/docs/reference/v2/rest/v2/LogEntry#logseverity) levels. The `DEFAULT` value of 0 is not allowed (lowest value is 100, maximum 800).',
        examples=[600],
    )
