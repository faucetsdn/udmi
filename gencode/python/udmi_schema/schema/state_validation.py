# generated by datamodel-codegen:
#   filename:  state_validation.json

from __future__ import annotations

from datetime import datetime
from typing import Dict, List, Optional

from pydantic import BaseModel, ConfigDict, Field, constr

from .config_udmi import Setup
from .entry import Entry
from .events_validation_device import DeviceValidationEvents
from .state_validation_feature import FeatureValidationState
from .state_validation_schema import SchemaValidationState


class Summary(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    correct_devices: Optional[List[str]] = None
    extra_devices: Optional[List[str]] = None
    missing_devices: Optional[List[str]] = None
    error_devices: Optional[List[str]] = None


class ValidationState(BaseModel):
    """
    Validation state summary
    """

    model_config = ConfigDict(
        extra='forbid',
    )
    timestamp: Optional[datetime] = Field(
        None,
        description='Not included in messages published by devices. Part of message subblocks within cloud pipeline. RFC 3339 Timestamp the payload was generated',
        examples=['2019-01-17T14:02:29.364Z'],
    )
    version: Optional[str] = Field(None, description='Version of the UDMI schema')
    cloud_version: Optional[Setup] = Field(
        None, description='Version of the udmi cloud install'
    )
    udmi_version: Optional[str] = Field(
        None, description='Version of the local udmi tools'
    )
    last_updated: Optional[datetime] = Field(
        None, description='Last time this validation report was updated'
    )
    start_time: Optional[datetime] = Field(
        None, description='timestamp of when the validation report was started'
    )
    status: Optional[Entry] = None
    features: Optional[Dict[constr(pattern=r'^[.a-z]+$'), FeatureValidationState]] = (
        None
    )
    schemas: Optional[Dict[constr(pattern=r'^[.a-z]+$'), SchemaValidationState]] = None
    summary: Optional[Summary] = Field(None, title='Validation Summary')
    devices: Optional[
        Dict[constr(pattern=r'^[A-Z]{2,6}-[1-9][0-9]*$'), DeviceValidationEvents]
    ] = None
