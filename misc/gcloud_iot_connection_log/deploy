#!/bin/bash

if (( $# < 3 )); then
    echo $0 PROJECT_ID DATASET_ID LOCATION [--drop]
    exit
fi

PROJECT_ID=$1
DATASET_ID=$2
LOCATION=$3
shift 4

if [[ $1 == "--drop" ]]; then
    shift 1
    #echo "WARNING: Dropping tables in 5 seconds. Data will be permanently lost"
    #sleep 5 && echo "Deleting tables ..." && sleep 3
    bq rm -t -f $PROJECT_ID:$DATASET_ID.iot_connects
fi

FUNCTION_NAME=gcloud_iot_connection_log
TOPIC=iot_connection_log
TABLE_NAME=iot_connection_log

# State table
bq mk \
    --table \
    --time_partitioning_field timestamp \
    --time_partitioning_type DAY \
    --clustering_fields device_registry_id,device_id \
    $PROJECT_ID:$DATASET_ID.$TABLE_NAME \
    schema_iot_logs.json 

# Create pub/sub topic
gcloud pubsub topics create $TOPIC --project=$PROJECT_ID 

# create logs router
gcloud logging sinks create iot_connections_logsink \
    pubsub.googleapis.com/projects/$PROJECT_ID/topics/$TOPIC \
    --log-filter='resource.type="cloudiot_device" AND (jsonPayload.eventType="DISCONNECT" OR jsonPayload.eventType="CONNECT")'
    --project=$PROJECT_ID

LOGSINK_SERVICE_ACCOUNT=$(gcloud logging sinks describe iot_connections_logsink --project=$PROJECT_ID | grep writerIdentity | sed "s/writerIdentity: //")
gcloud pubsub topics add-iam-policy-binding $TOPIC --member=$LOGSINK_SERVICE_ACCOUNT --role='roles/pubsub.publisher'  --project=$PROJECT_ID 

# Deploy Cloud Function
gcloud functions deploy $FUNCTION_NAME \
    --trigger-topic=$TOPIC\
    --entry-point=logConnectionEvents \
    --runtime nodejs16 \
    --project=$PROJECT_ID \
    --source=functions/ \
    --set-env-vars PROJECT_ID=$PROJECT_ID,DATASET_ID=$DATASET_ID
