#!/bin/bash -e

if (( $# < 1 )); then
    echo Usage: $0 PROJECT_ID [options]
    false
fi

ROOT=$(realpath $(dirname $0)/..)
cd $ROOT/dashboard

PROJECT=$1
shift

udmi_state=udmi_state
udmi_reflect=udmi_reflect
udmi_target=udmi_target
udmi_config=udmi_config

append_env_var () {
   extra_args="$extra_args --set-env-vars $1=$2"
} 

while (( $# > 0 )) ; do
    k=$(echo $1 | cut -d'=' -f1)
    v=$(echo $1 | cut -d'=' -f2)

  case $k in
    --udmi_state) udmi_state=$v && append_env_var UDMI_STATE $v;;
    --udmi_reflect) udmi_reflect=$v && append_env_var UDMI_REFLECT $v;;
    --udmi_target) udmi_target=$v && append_env_var UDMI_TARGET $v;;
    --udmi_config) udmi_config=$v && append_env_var UDMI_CONFIG $v;;
    --reflect_registry) append_env_var REFLECT_REGISTRY $v;;
    --service_account) extra_args="$extra_args --service_account=$v"
  esac
  shift
done

RUNTIME=nodejs12
SOURCE=functions/

version=`git describe --dirty`
echo Deploying version $version to $PROJECT
echo "const udmi_deploy_version = '$version';" > public/deploy_version.js

cat <<EOF > functions/version.js
module.exports = {
  udmis: '$version'
}
EOF

PUBSUB_FUNCTIONS="udmi_target udmi_state udmi_config udmi_reflect"
for func in $PUBSUB_FUNCTIONS; do
    echo Deploying pubsub-trigger function $func as ${!func}...

    gcloud functions deploy ${!func} \
      --set-env-vars GCP_PROJECT=$PROJECT \
      --trigger-topic=${!func}  \
      --runtime=$RUNTIME \
      --project=$PROJECT \
      --source=$SOURCE \
      --entry-point=$func \
      $extra_args &
    sleep 10
done

echo Waiting for all deployments to complete...
wait

echo Skipped deploy of udmi_update b/c it requires firebase.
echo Done with deploying functions $PUBSUB_FUNCTIONS
