name: UDMI test suite

on:
  push:
  pull_request:
  schedule:
    - cron: '0 13 * * *'

concurrency:
  group: ci-${{ github.repository }}
  cancel-in-progress: true

jobs:
  unit:
    name: Unit Tests
    runs-on: ubuntu-latest
    timeout-minutes: 10
    steps:
      - uses: actions/setup-java@v1
        with:
          java-version: '11'
      - uses: actions/setup-python@v4
        with:
          python-version: '3.10'
      - name: Checkout source
        uses: actions/checkout@v2.3.4
      - name: bin/run_tests install_dependencies
        run: bin/run_tests install_dependencies
      - name: bin/run_tests code_tests
        if: ${{ always() }}
        run: bin/run_tests code_tests
      - name: bin/run_tests schema_tests
        if: ${{ always() }}
        run: bin/run_tests schema_tests
      - name: bin/run_tests trace_tests
        if: ${{ always() }}
        run: bin/run_tests trace_tests
      - name: bin/run_tests registrar_tests
        if: ${{ always() }}
        run: bin/run_tests registrar_tests
      - name: bin/run_tests util_tests
        if: ${{ always() }}
        run: bin/run_tests util_tests

  spelling:
    name: Docs Spelling Checks
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - name: Check Spelling
        uses: rojopolis/spellcheck-github-actions@0.23.0
        with:
          config_path: .spellcheck.yml
          task_name: Markdown

  redirect:
    name: Endpoint Redirection
    runs-on: ubuntu-latest
    needs: udmi  # Access to UDMI-REFLECTOR is mutually exclusive
    timeout-minutes: 10
    steps:
      - uses: actions/checkout@v2
      - uses: actions/setup-java@v1
        with:
          java-version: '11'
      - name: base setup
        run: bin/run_tests install_dependencies
      - name: mosquitto connect
        run: |
          bin/test_mosquitto
      - name: pubber redirect
        env:
          GCP_TARGET_PROJECT: ${{ secrets.GCP_TARGET_PROJECT }}
        if: "${{ env.GCP_TARGET_PROJECT != '' }}"
        run: |
          bin/test_redirect $GCP_TARGET_PROJECT
      - name: pubber cmd checks
        env:
          GCP_TARGET_PROJECT: ${{ secrets.GCP_TARGET_PROJECT }}
        if: "${{ env.GCP_TARGET_PROJECT != '' }}"
        run: |
          echo ::::::: pubber.out.1
          cat pubber.out.1
          echo :::::::
          echo Simple checks that a redirect happened and failed
          fgrep registries/ZZ-TRI-FECTA/devices pubber.out.1
          fgrep registries/missing/devices pubber.out.1
          fgrep 'While waiting for connection start: Connection error' pubber.out.1
          fgrep 'Endpoint connection restored to last working endpoint' pubber.out.1
      - name: pubber config checks
        env:
          GCP_TARGET_PROJECT: ${{ secrets.GCP_TARGET_PROJECT }}
        if: "${{ env.GCP_TARGET_PROJECT != '' }}"
        run: |
          echo ::::::: pubber.out.2
          cat pubber.out.2
          echo :::::::
          echo Check the redirect-by-config setup
          fgrep registries/ZZ-TRI-FECTA/devices pubber.out.2
          fgrep registries/reconfigure/devices pubber.out.2
          fgrep 'While waiting for connection start: Connection error' pubber.out.2
          fgrep 'Endpoint connection restored to last working endpoint' pubber.out.2
          fgrep 'Stopping system with extreme prejudice, restart true' pubber.out.2  # restart config
          fgrep 'Stopping system with extreme prejudice, restart false' pubber.out.2  # auto-kill
          fgrep 'Done with pubber run, exit code 193' pubber.out.2  # last_start auto-kill check

  udmi:
    name: Integration Tests
    runs-on: ubuntu-latest
    timeout-minutes: 30
    steps:
      - uses: actions/checkout@v2
      - uses: actions/setup-java@v1
        with:
          java-version: '11'
      - name: base setup
        run: bin/run_tests install_dependencies
      - name: telemetry validator
        env:
          GCP_TARGET_PROJECT: ${{ secrets.GCP_TARGET_PROJECT }}
        if: "${{ env.GCP_TARGET_PROJECT != '' }}"
        run: |
          bin/test_validator $GCP_TARGET_PROJECT
          more /tmp/validator.out
      - name: sequence tests
        env:
          GCP_TARGET_PROJECT: ${{ secrets.GCP_TARGET_PROJECT }}
          SEQUENCER_OPTS: ${{ secrets.SEQUENCER_OPTS }}
          UDMI_ALT_REGISTRY: ${{ secrets.UDMI_ALT_REGISTRY }}
        if: "${{ env.GCP_TARGET_PROJECT != '' }}"
        run: |
          bin/test_sequencer $GCP_TARGET_PROJECT
          more /tmp/sequencer.out /tmp/generated.md
      - name: sequencer end state
        if: ${{ always() }}
        run: |
          cat sites/udmi_site_model/out/devices/AHU-1/sequencer_state.json || true
      - name: itemized sequencer tests
        env:
          GCP_TARGET_PROJECT: ${{ secrets.GCP_TARGET_PROJECT }}
          SEQUENCER_OPTS: ${{ secrets.SEQUENCER_OPTS }}
        if: "${{ env.GCP_TARGET_PROJECT != '' }}"
        run: |
          bin/test_itemized $GCP_TARGET_PROJECT
          more out/test_itemized.out
      - name: output logs
        if: ${{ always() }}
        run: |
          cd sites/udmi_site_model/out && more `find . -type f` || true
      - name: validator logs
        if: ${{ always() }}
        run: |
          cat out/validator.out || true
      - name: pubber logs
        if: ${{ always() }}
        run: |
          more pubber.out* out/pubber.out* || true
          more pubber/out/*/*.json
