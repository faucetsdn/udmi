name: UDMI test suite

on:
  push:
  pull_request:
  schedule:
    - cron: '0 13 * * *'

jobs:
  unit:
    name: Unit Tests
    runs-on: ubuntu-latest
    steps:
      - name: Checkout source
        uses: actions/checkout@v2.3.4
      - uses: actions/setup-java@v1
        with:
          java-version: '11'
      - name: Install dependencies
        run: |
          bin/setup_base
          bin/clone_model
      - name: code checks
        if: ${{ always() }}
        run: |
          bin/gencode check
          pubber/bin/build check
          validator/bin/build check
      - name: Schema conformance tests
        if: ${{ always() }}
        run: bin/test_schema -p
      - name: Registrar tests
        if: ${{ always() }}
        run: |
          bin/test_registrar
          bin/test_sites

  redirect:
    name: Endpoint Redirection
    runs-on: ubuntu-latest
    timeout-minutes: 10
    steps:
      - uses: actions/checkout@v2
      - uses: actions/setup-java@v1
        with:
          java-version: '11'
      - name: base setup
        run: |
          bin/setup_base
          bin/clone_model
      - name: pubber redirect
        run: |
          timeout 5m bin/pubber sites/udmi_site_model bos-peringknife-dev AHU-1 38172 redirectRegistry=missing | tee pubber.out
      - name: pubber checks
        run: |
          # Simple checks that a redirect happened and failed
          fgrep registries/ZZ-TRI-FECTA/devices/AHU-1 pubber.out
          fgrep 'system.config.parse success' pubber.out
          fgrep registries/missing/devices/AHU-1 pubber.out
          fgrep Not authorized to connect
    
  udmi:
    name: Sequence tests
    runs-on: ubuntu-latest
    timeout-minutes: 15
    steps:
      - uses: actions/checkout@v2
      - uses: actions/setup-java@v1
        with:
          java-version: '11'
      - name: base setup
        run: |
          bin/setup_base
          bin/clone_model
      - name: sequence tests
        env:
          GCP_TARGET_PROJECT: ${{ secrets.GCP_TARGET_PROJECT }}
        if: "${{ env.GCP_TARGET_PROJECT != '' }}"
        run: |
          bin/test_sequencer $GCP_TARGET_PROJECT
          more /tmp/sequencer.out
          diff -u /tmp/sequencer.out etc/sequencer.out && echo No output diff detected.
      - name: telemetry validator
        env:
          GCP_TARGET_PROJECT: ${{ secrets.GCP_TARGET_PROJECT }}
        if: "${{ env.GCP_TARGET_PROJECT != '' }}"
        run: |
          # Run after sequencer to device config starts in a known state
          bin/test_validator $GCP_TARGET_PROJECT
          more /tmp/validator.out
          diff -u /tmp/validator.out etc/validator.out && echo No validator diff detected.
      - name: device output logs
        if: ${{ always() }}
        run: more `find udmi_site_model/out/devices/ -type f`
      - name: pubber logs
        if: ${{ always() }}
        run: |
          cat pubber.out || true
          more out/*.json
