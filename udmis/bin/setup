#!/bin/bash -e

if [[ $# != 1 ]]; then
    echo Usage: $0 project_id[/namespace]
    false
fi

full_id=$1
shift

project_id=${full_id%/*}
namespace=${full_id#$project_id}
namespace=${namespace#/}
success=$(mktemp)
rm -f $success

ROOT=$(dirname $0)/..
cd $ROOT

echo Configuring for GCP project $project_id...
quota_project=$(jq -r .quota_project_id $HOME/.config/gcloud/application_default_credentials.json)
if [[ $quota_project != $project_id ]]; then
    gcloud auth application-default set-quota-project $project_id
fi
gcloud --quiet config set project $project_id

saved=$(kubectl config current-context)
kcontexts=$(kubectl config get-contexts -o name | fgrep _${project_id}_)

if [[ -z $kcontexts ]]; then
    echo No kubectl context defined for project $project_id
    echo "  kubectl config get-contexts -o name | fgrep _${project_id}_)"
    false
fi

for context in $kcontexts; do
    k8s_parts=$(tr '_' ' ' <<<$context)
    echo k8s context is $k8s_parts

    GCP_PROJECT=$(awk '{print $2}' <<<$k8s_parts)
    GCP_REGION=$(awk '{print $3}' <<<$k8s_parts)
    K8S_CLUSTER=$(awk '{print $4}' <<<$k8s_parts)
    K8S_NAMESPACE=$(awk '{print $5}' <<<$k8s_parts)

    if [[ $GCP_PROJECT == $project_id && $K8S_NAMESPACE == $namespace ]]; then
        echo Matched context $context
        echo $context > $success
        break
    fi
done

if [[ ! -f $success ]]; then
    echo No context matching project $project_id and namespace ${namespace:-default} found.
    false
fi

kubectl config use-context $(< $success)
