#!/bin/bash -e

ROOT=$(dirname $0)/..
cd $ROOT
DROOT=.

function usage {
    echo Error: $*
    echo Usage: $0 { prep, build, shell, run, deploy, update, status, logs, stop } [--no-check] [--selfie] [repo]
    echo Project: $GCP_PROJECT
    echo Try starting with: $0 build
    exit 1
}

cmd=$1
shift || usage missing command

GCP_PROJECT=$(gcloud config get project)
REPOSITORY=gcr.io/$GCP_PROJECT

IMAGE=udmis

if [[ $1 == "--no-check" ]]; then
    NOCHECK=1
    shift
fi

if [[ $1 == "--selfie" ]]; then
    IMAGE=selfie
    shift
fi

if [[ -n $1 ]]; then
    REPOSITORY=$1
    shift
fi

if [[ $# != 0 ]]; then
    echo unknown arguments: $*
    usage
fi

echo Using GCP project $GCP_PROJECT

if [[ -z $NOCHECK ]]; then
    CONTEXT=`kubectl config current-context`
    CONTEXT_ARGS=(${CONTEXT//_/ })
    KPROJECT=${CONTEXT_ARGS[1]}
    if [[ $KPROJECT != $GCP_PROJECT ]]; then
        echo Kubernetes context $CONTEXT does not match gcloud project $GCP_PROJECT
        false
    fi
fi

LIBFILE=build/libs/udmis-1.0-SNAPSHOT-all.jar

current_user=$USER@$HOSTNAME

revparse=`git rev-parse HEAD`

udmi_ver=g${revparse:0:9}
udmi_ref=$REPOSITORY/udmi:$udmi_ver

version=`git describe || echo $udmi_ref`

RUNARGS="--rm -ti -v $PWD/var:/udmi -v $HOME/.config:/root/.config --tmpfs /tmp"
TEMPLATES=$(cd etc; ls k8s_*.yaml)

if [[ $cmd == prep || $cmd == build ]]; then
    rm -rf var tmp && mkdir -p var tmp
    bin/build
    build_time=`date --utc -Imin -r $LIBFILE`
    cp etc/prod_pod.json var/
    cat <<EOF > var/deployed_version.json
{
  "udmi_version": "$version",
  "udmi_ref": "$udmi_ref",
  "built_at": "$build_time",
  "built_by": "$current_user"
}
EOF
    more var/deployed_version.json | cat
    echo Next try: $0 build
fi

if [[ $cmd == build ]]; then
    echo Building Dockerfile.$IMAGE
    docker build -f Dockerfile.$IMAGE -t $IMAGE $DROOT
fi

if [[ $cmd == build && $REPOSITORY != local ]]; then
    docker tag $IMAGE $udmi_ref
    docker push $udmi_ref
    hash=$(docker images --digests ${udmi_ref%:*} | fgrep $udmi_ver | awk '{print $3}')
    ihash=$udmi_ref@$hash
    for file in $TEMPLATES; do
        if fgrep -q @IMAGE-$IMAGE@ etc/$file; then
            sed < etc/$file > tmp/$file -e "s^@IMAGE-$IMAGE@^$ihash^"
            echo Updated tmp/$file with image $ihash
        fi
    done
fi

if [[ $cmd == prep ]]; then
    echo Next try: $0 build
elif [[ $cmd == build ]]; then
    echo Next try: $0 '{run, deploy, update}'
elif [[ $cmd == run ]]; then
    docker run $RUNARGS $IMAGE
elif [[ $cmd == shell ]]; then
    docker run $RUNARGS $IMAGE bash
elif [[ $cmd == deploy ]]; then
    kubectl apply -f tmp/k8s_pod.yaml
    echo Next try: $0 status
elif [[ $cmd == status ]]; then
    kubectl describe pods udmis-test-pod
    echo Next try: $0 logs
elif [[ $cmd == logs ]]; then
    kubectl logs udmis-test-pod
elif [[ $cmd == stop ]]; then
    kubectl delete pod/udmis-test-pod
elif [[ $cmd == update ]]; then
    kubectl apply -f tmp/k8s_udmis.yaml
elif [[ $cmd == remove ]]; then
    kubectl delete deployment/udmis-pods
else
    echo Unknown command $cmd
    false
fi
