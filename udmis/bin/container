#!/bin/bash -e

ROOT=$(dirname $0)/..
cd $ROOT
DROOT=.

function usage {
    echo Error: $*
    echo Usage: $0 { build, shell, run, push, deploy, update, status, logs, stop } [repo]
    echo Project: $PROJECT
    echo Try starting with: $0 build
    exit 1
}

cmd=$1
shift || usage missing command
repo=$1

PROJECT=$(gcloud config get project)

if [[ -z $repo ]]; then
    REPOSITORY=gcr.io/$PROJECT
else
    REPOSITORY=$repo
fi

IMAGE=udmis


echo Using GCP project $PROJECT

CONTEXT=`kubectl config current-context`
CONTEXT_ARGS=(${CONTEXT//_/ })
KPROJECT=${CONTEXT_ARGS[1]}
if [[ $KPROJECT != $PROJECT ]]; then
    echo Kubernetes context $CONTEXT does not match gcloud project $PROJECT
    false
fi

LIBFILE=build/libs/udmis-1.0-SNAPSHOT-all.jar

current_user=$USER@$HOSTNAME
version=`git describe --abbrev=0`
srcver=`git describe --dirty`
funchash=`git log -n 1 --oneline -- src/ | awk '{print $1}'`
funccount=`git diff --name-only -- src/ | wc -l`
if [[ $funccount != 0 ]]; then
    funcdirty=-dirty
fi
funcver=`git describe $funchash`$funcdirty

RUNARGS="--rm -ti -v $PWD/var:/udmi -v $HOME/.config:/root/.config --tmpfs /tmp"
TEMPLATES="k8s_pod.yaml k8s_deployment.yaml"

if [[ $cmd == build ]]; then
    rm -rf var
    mkdir -p var
    bin/build
    build_time=`date --utc --iso=seconds -r $LIBFILE`
    cat <<EOF > var/deployed_version.json
{
  "udmi_version": "$version",
  "udmi_source": "$srcver",
  "udmi_functions": "$funcver",
  "built_at": "$build_time",
  "built_by": "$current_user"
}
EOF
    sed -e "s/@PROJECT@/$PROJECT/" < etc/prod_pod.json > var/prod_pod.json
    more var/deployed_version.json var/prod_pod.json | cat
    docker build -f Dockerfile.udmis -t $IMAGE $DROOT
    echo Next try: $0 push
elif [[ $cmd == run ]]; then
    docker run $RUNARGS udmis
elif [[ $cmd == shell ]]; then
    docker run $RUNARGS $IMAGE bash
elif [[ $cmd == push ]]; then
    IMAGENAME=$REPOSITORY/$IMAGE
    docker tag $IMAGE $IMAGENAME
    docker push $IMAGENAME
    hash=$(docker images --digests $IMAGENAME | fgrep latest | awk '{print $3}')
    image=$IMAGENAME@$hash
    for file in $TEMPLATES; do
        sed < etc/$file > var/$file -e "s^@IMAGE@^$image^"
        echo Updated var/$file with image $image
    done
    echo Next try: $0 deploy
elif [[ $cmd == deploy ]]; then
    kubectl apply -f var/k8s_pod.yaml
    echo Next try: $0 status
elif [[ $cmd == status ]]; then
    kubectl describe pods udmis-test-pod
    echo Next try: $0 logs
elif [[ $cmd == logs ]]; then
    kubectl logs udmis-test-pod
elif [[ $cmd == stop ]]; then
    kubectl delete pod/udmis-test-pod
elif [[ $cmd == update ]]; then
    kubectl apply -f var/k8s_deployment.yaml
elif [[ $cmd == remove ]]; then
    kubectl delete deployment/udmis-pods
else
    echo Unknown command $cmd
    false
fi
