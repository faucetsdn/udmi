#!/bin/bash -eu

UDMI_ROOT=$(dirname $0)/..
cd $UDMI_ROOT

source $UDMI_ROOT/etc/shell_common.sh

if [[ $# != 0 ]]; then
    echo Usage: $0
    false
fi

source $UDMI_ROOT/etc/mosquitto_ctrl.sh

SERV_USER=rocket
SERV_PASS=monkey
CLNT_USER=kiwi
CLNT_PASS=possum

bin/start_mosquitto

site_path=sites/udmi_site_model
device_id=AHU-1 # Static device for testing
serial_no=$RANDOM
CLIENT_DIR=$site_path/devices/$device_id
DEV_CONF=$site_path/devices/$device_id/out/generated_config.json

site_config=$site_path/cloud_iot_config.json
cloud_region=$(jq -r .cloud_region $site_config)
registry_id=$(jq -r .registry_id $site_config)

CLNT_ID=$registry_id/client
SERV_ID=$registry_id/server

sudo chmod a+r $CERT_DIR/rsa_private.*
bin/keygen CERT $CLIENT_DIR

SERVER_OPTS="-i $SERV_ID -u $SERV_USER -P $SERV_PASS --cafile $CA_CERT --cert $CERT_DIR/rsa_private.crt --key $CERT_DIR/rsa_private.pem"
CLIENT_OPTS="-i $CLNT_ID -u $CLNT_USER -P $CLNT_PASS --cafile $CA_CERT --cert $CLIENT_DIR/rsa_private.crt --key $CLIENT_DIR/rsa_private.pem"

$MOSQUITTO_CTRL deleteClient $SERV_USER
$MOSQUITTO_CTRL createClient $SERV_USER -p $SERV_PASS # No client_id to allow multiple backend connections.
$MOSQUITTO_CTRL addClientRole $SERV_USER service
$MOSQUITTO_CTRL deleteClient $CLNT_USER
$MOSQUITTO_CTRL createClient $CLNT_USER -p $CLNT_PASS -c $CLNT_ID
$MOSQUITTO_CTRL addClientRole $CLNT_USER device

killall mosquitto_sub || true

topic=/r/mqtt/d/test


echo Subscribing to all topics in the background...
mosquitto_sub $SERVER_OPTS -F "%t %p" -t '/r/+/d/+/#' > out/mosquitto.sub &

sleep 1

echo Publishing test message
mosquitto_pub $CLIENT_OPTS -t $topic -m "Hello Racket"

sleep 1

echo Checking received message
fgrep Racket out/mosquitto.sub

CLIENT_USER=nobody
hash_pass=$(sha256sum < $site_path/devices/$device_id/rsa_private.pkcs8)
dev_pass=${hash_pass:0:8}
dev_id=/r/$registry_id/d/$device_id
$MOSQUITTO_CTRL deleteClient $CLIENT_USER || true
$MOSQUITTO_CTRL createClient $CLIENT_USER -p $dev_pass -c $dev_id
$MOSQUITTO_CTRL addClientRole $CLIENT_USER device

sleep 1

cat <<EOF > /tmp/pubber_config.json
{
    "endpoint": {
      "protocol": "mqtt",
      "transport": "ssl",
      "client_id": "$dev_id",
      "hostname": "127.0.0.1",
      "msg_prefix": "/r/$registry_id/d/$device_id",
      "config_sync_sec": -1,
      "port": 8883,
      "auth_provider": {
        "basic": {
          "username": "$CLIENT_USER",
          "password": "$dev_pass"
        }
      }
    },
    "sitePath": "$site_path",
    "deviceId": "$device_id",
    "serialNo": "$serial_no",
    "options": {
      "smokeCheck": true
    }
}
EOF

kill $(pgrep -f 'java.*pubber-.*jar') || true

pubber/bin/build

# Clean out the persistant data store to ensure a clean state each time.
rm -rf sites/udmi_site_model/out/devices/$device_id/persistent_data.json

echo Publishing config to /r/$registry_id/d/$device_id/config
mosquitto_pub $CLIENT_OPTS -r -t /r/$registry_id/d/$device_id/config -f $DEV_CONF

echo Running pubber smoke check
# TODO: Replace this with proper smoke check when backend is working.
timeout 20s pubber/bin/run /tmp/pubber_config.json || true

echo Publishing ending test message
mosquitto_pub $CLIENT_OPTS -t $topic -m "Hello Rudolph"

sleep 1

echo Killing background clients
killall mosquitto_sub || true

echo Received messages:
cat out/mosquitto.sub | cut -c -120

echo Checking received end message
fgrep Rudolph out/mosquitto.sub

echo Checking messages for matching serial no $serial_no
received_no=$(fgrep operational out/mosquitto.sub | head -n 1 | sed -E 's/^[^{]+//' | jq -r .system.serial_no)
received_topic=$(fgrep operational out/mosquitto.sub | head -n 1 | awk '{ print $1 }')
[[ -z $received_topic ]] && fail No matching receive message found.

expected_topic=/r/$registry_id/d/$device_id/state
[[ $received_topic != $expected_topic ]] && fail Unexpected received topic $received_topic != $expected_topic

[[ $received_no != $serial_no ]] && fail Mismatched/missing serial no: $received_no != $serial_no

echo export MQTT_TEST_BROKER=tcp://localhost:8883
echo Done with mosquitto pubber check.
