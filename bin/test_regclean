#!/bin/bash -e

UDMI_ROOT=$(dirname $0)/..
cd $UDMI_ROOT

source etc/shell_common.sh

solo_arg=

if [[ $# -lt 1 ]]; then
    echo Usage: $0 PROJECT_SPEC[@BROKER]
    false
fi

if [[ $1 == solo ]]; then
    solo_arg=AHU-1
    shift
fi

project_spec=$1
shift

[[ -n ${GITHUB_RUN_NUMBER:-} ]] && echo "Workflow run number $GITHUB_RUN_NUMBER" || true
echo "export TARGET_PROJECT=${TARGET_PROJECT:-}"
echo "export UDMI_REGISTRY_SUFFIX=${UDMI_REGISTRY_SUFFIX:-}"
echo "export UDMI_ALT_REGISTRY=${UDMI_ALT_REGISTRY:-}"

site_path=sites/udmi_site_model
iot_config=$site_path/cloud_iot_config.json
output_file=$site_path/out/registration_summary.json
csv_file=$site_path/out/registration_summary.csv
expected_num_id=1234567890
pubber_config=/tmp/pubber_config.json
pubber_log=out/pubber.log
serial_no=clean-$RANDOM
device_id=AHU-1
fake_id=ACME-2301
fake_device=$site_path/devices/$fake_id
fake_metadata=$fake_device/metadata.json
device_dir=$site_path/devices/$device_id

function check_csv_file {
    expected=$1
    more $csv_file | cat

    fake_state=`fgrep $fake_id $csv_file | cut -d, -f3`
    [[ ${fake_state# } == $expected ]] || fail Device $fake_id not $expected
    [[ `fgrep BLOCK $csv_file | wc -l` -le 1 ]] || fail More than one blocked device

    device_num_id=`fgrep AHU-22 $csv_file | cut -d, -f2`
    [[ $(echo $device_num_id) == $expected_num_id ]] || fail Device num_id $device_num_id does not match expected $expected_num_id

    sns_line=`fgrep -n SNS-4 $csv_file | cut -d: -f1`
    [[ $sns_line == 6 ]] || fail Device SNS-4 not found on expected output csv line, was $sns_line expected 6
}

echo bin/keygen CERT $device_dir
bin/keygen CERT $device_dir || true

pubber/bin/build
validator/bin/build

echo Clean site out/ directory...
rm -rf $site_path/out
mkdir -p out $site_path/out

if [[ -n ${UDMI_REGISTRY_SUFFIX:-} ]]; then
    echo Using registry suffix $UDMI_REGISTRY_SUFFIX
    registry_suffix=$UDMI_REGISTRY_SUFFIX
    registrar_opts="-e $UDMI_REGISTRY_SUFFIX"
else
    registry_suffix=
    registrar_opts=
fi

registry_id=`jq -r .registry_id $iot_config`
cloud_region=`jq -r .cloud_region $iot_config`
full_config=$(realpath $site_path)/full_config.json

site_args="$site_path $project_spec $registrar_opts"
full_args="$full_config $registrar_opts"

iot_provider=null
registry_prefix=
project_id=${project_spec##*/}
udmi_namespace=
quoted_namespace=null
if [[ $project_spec =~ ^// ]]; then
    no_prefix=${project_spec#//}
    iot_provider=\"${no_prefix%%/*}\"
    no_provider=${no_prefix#*/}
    project_id=${no_provider%/*}
    udmi_namespace=${no_provider#$project_id}
    [[ -n $udmi_namespace ]] && registry_prefix=${udmi_namespace#/}~
    [[ -n $udmi_namespace ]] && quoted_namespace=\"${udmi_namespace#/}\"
elif [[ $project_spec =~ @ ]]; then
    iot_provider=\"jwt\"
    broker_hostname=${project_spec#*@}
    project_id=${project_spec%@*}
    project_id=${project_id}
else
    iot_provider=\"gcp\"
fi

client_id=\"projects/$project_id/locations/$cloud_region/registries/$registry_prefix$registry_id$registry_suffix/devices/$device_id\"
topic_prefix=null
auth_provider=null
transport=null

if [[ $iot_provider == \"clearblade\" ]]; then
    broker_hostname=${cloud_region}-mqtt.clearblade.com
elif [[ $iot_provider == \"gbos\" ]]; then
    broker_hostname=mqtt.bos.goog
elif [[ $iot_provider == \"mqtt\" ]]; then
    broker_hostname=$project_id
    client_id=\"/r/$registry_prefix$registry_id$registry_suffix/d/$device_id\"
    hash_pass=$(sha256sum < $site_path/devices/$device_id/rsa_private.pkcs8)
    client_pass=${hash_pass:0:8}
    topic_prefix=$client_id
    auth_provider="{ \"basic\": { \"username\": $client_id, \"password\": \"$client_pass\" }}"
    transport=\"ssl\"
elif [[ -z $broker_hostname ]]; then
    broker_hostname=mqtt.googleapis.com
fi

cat <<EOF > $pubber_config
{
    "endpoint": {
      "protocol": "mqtt",
      "transport": $transport,
      "client_id": $client_id,
      "topic_prefix": $topic_prefix,
      "auth_provider": $auth_provider,
      "hostname": "$broker_hostname"
    },
    "sitePath": "$site_path",
    "deviceId": "$device_id",
    "projectId": "$project_id",
    "registryId": "$registry_id",
    "serialNo": "$serial_no",
    "options": {
      "smokeCheck": true
    }
}
EOF

echo Corrupting site model to check error handling...
mkdir -p $site_path/devices/XXX-1
echo { > $site_path/devices/XXX-1/metadata.json
mkdir -p $site_path/devices/XXX-2/out
echo hello > $site_path/devices/XXX-2/out/exceptions.txt

echo Create fake device for testing blocked device case.
rm -rf $fake_device && cp -a $device_dir $fake_device

# Adjust discovery address so discovery sequence tests work properly.
jq ".localnet.families.vendor.addr = \"2183213\"" $fake_metadata | sponge $fake_metadata

# Construct a fullly specified configuration to test alternate forms.
jq ".iot_provider = $iot_provider" $iot_config > $full_config
jq ".project_id = \"$project_id\"" $full_config | sponge $full_config
jq ".udmi_namespace = $quoted_namespace" $full_config | sponge $full_config

# And corrupt the default model, to make sure cmdline overrides work
jq '.iot_provider = "dynamic"' $iot_config | sponge $iot_config
jq '.project_id = "this-is-not-right"' $iot_config | sponge $iot_config
jq '.udmi_namespace = "bunny"' $iot_config | sponge $iot_config

echo Create one device to test that it works...
echo bin/registrar $site_args $device_id
bin/registrar $site_args $device_id

echo Check $device_id to make sure that it works...
echo bin/pubber $pubber_config
result=0
timeout 30s bin/pubber $pubber_config 2> $pubber_log || result=$?
[[ $result == 0 ]] || fail Improper pubber failure code $result

echo Clean out the registry to make sure devices get removed...
echo bin/registrar $site_args -d -x
bin/registrar $site_args -d -x

echo Checking reported cloud version info
jq .cloud_version.udmi_ref $output_file

echo Pubber config from $pubber_config:
cat $pubber_config

echo Check for failure in running pubber...
echo bin/pubber $pubber_config
result=0
timeout 30s bin/pubber $pubber_config 2> $pubber_log || result=$?
[[ $result == 255 ]] || fail Improper pubber failure code $result

echo Now recreate the registry from scratch!
echo bin/registrar $site_args
bin/registrar $site_args

check_csv_file ERRORS

echo Remove fake device from site model, so it will be blocked
rm -rf $fake_device
echo $UDMI_ROOT/bin/registrar $full_args -b
# Test from other-directory for proper path handling
(cd /tmp; $UDMI_ROOT/bin/registrar $full_args -b)

check_csv_file BLOCK

echo Check $device_id again, but this time with success...
echo bin/pubber $pubber_config
result=0
timeout 30s bin/pubber $pubber_config 2> $pubber_log || result=$?
[[ $result == 0 ]] || fail Improper pubber failure code $result

echo Successful pubber check passed on clean registry.

if [[ -n $solo_arg ]]; then
    echo Deleting singular entry $solo_arg...
    echo bin/registrar $site_args -d $solo_arg
    bin/registrar $site_args -d $solo_arg
    search "Deleting device $solo_arg \(1/1)" out/registrar.log
    search "Deleted 1 devices" out/registrar.log

    echo Sleeping to avoid IoT Core race condition...
    sleep 20

    echo bin/registrar $site_args $solo_arg
    bin/registrar $site_args $solo_arg

    echo Checking creation of one device
    search "Processing 1 new devices..." out/registrar.log
    search "Processed $solo_arg \(1/1) in [0-9.]+s \(add)" out/registrar.log
    search "Processed 1 \(skipped 0) devices in " out/registrar.log
    search "Updating 0 existing devices" out/registrar.log
    search "Processed 0 \(skipped 0) devices in " out/registrar.log
    echo Done with solo update test for $solo_arg
fi

if [[ -n ${UDMI_ALT_REGISTRY:-} ]]; then
    echo Registering alt registry $UDMI_ALT_REGISTRY...
    echo bin/registrar $site_args -a $UDMI_ALT_REGISTRY
    bin/registrar $site_args -a $UDMI_ALT_REGISTRY
fi

echo Done with successful registry clean/create test
