#!/bin/bash -e

# Force consistent sort order
export LC_ALL=C

UDMI_ROOT=$(dirname $0)/..
cd $UDMI_ROOT

source etc/shell_common.sh

solo_arg=

if [[ $# -lt 1 ]]; then
    echo Usage: $0 PROJECT_ID[@BROKER]
    false
fi

if [[ $1 == solo ]]; then
    solo_arg=AHU-1
    shift
fi

project_id=$1
shift

[[ -n $GITHUB_RUN_NUMBER ]] && echo "Workflow run number $GITHUB_RUN_NUMBER" || true
echo "Run as: $0 $project_id"
echo "export TARGET_PROJECT=$TARGET_PROJECT"
echo "export UDMI_REGISTRY_SUFFIX=$UDMI_REGISTRY_SUFFIX"
echo "export UDMI_ALT_REGISTRY=$UDMI_ALT_REGISTRY"

site_path=sites/udmi_site_model
output_file=$site_path/out/registration_summary.json
pubber_config=/tmp/pubber_config.json
serial_no=clean-$RANDOM
device_id=AHU-1

pubber/bin/build
validator/bin/build

echo Clean site out/ directory...
rm -rf $site_path/out
mkdir -p out

if [[ -n $UDMI_REGISTRY_SUFFIX ]]; then
    echo Using registry suffix $UDMI_REGISTRY_SUFFIX
    registry_suffix=$UDMI_REGISTRY_SUFFIX
else
    registry_suffix=
fi

registry_id=`jq -r .registry_id $site_path/cloud_iot_config.json`
cloud_region=`jq -r .cloud_region $site_path/cloud_iot_config.json`

site_arg=$site_path
registrar_project=$project_id

registry_prefix=
project_target=${project_id##*/}
if [[ $project_id =~ ^// ]]; then
    no_prefix=${project_id#//}
    iot_provider=${no_prefix%%/*}
    no_provider=${no_prefix#*/}
    project_target=${no_provider%/*}
    udmi_namespace=${no_provider#$project_target}
    [[ -n $udmi_namespace ]] && registry_prefix=${udmi_namespace#/}~
elif [[ $project_id =~ @ ]]; then
    iot_provider=\"jwt\"
    broker_hostname=${project_id#*@}
    project_id=${project_id%@*}
    project_target=${project_id}
else
    iot_provider=gcp
fi

if [[ $iot_provider == clearblade ]]; then
    broker_hostname=${cloud_region}-mqtt.clearblade.com
elif [[ $iot_provider == gbos ]]; then
    broker_hostname=mqtt.bos.goog
elif [[ -z $broker_hostname ]]; then
    broker_hostname=mqtt.googleapis.com
fi

cat <<EOF > $pubber_config
{
    "endpoint": {
      "protocol": "mqtt",
      "client_id": "projects/$project_target/locations/$cloud_region/registries/$registry_prefix$registry_id$registry_suffix/devices/$device_id",
      "hostname": "$broker_hostname"
    },
    "sitePath": "$site_path",
    "deviceId": "$device_id",
    "projectId": "$project_target",
    "serialNo": "$serial_no",
    "options": {
      "smokeCheck": true
    }
}
EOF

echo Corrupting site model to check error handling...
mkdir -p $site_path/devices/XXX-1
echo { > $site_path/devices/XXX-1/metadata.json
mkdir -p $site_path/devices/XXX-2/out
echo hello > $site_path/devices/XXX-2/out/exceptions.txt

echo Clean out the registry to make sure devices get removed...
echo bin/registrar $site_arg $registrar_project -d
bin/registrar $site_arg $registrar_project -d

echo Checking reported cloud version info
jq .cloud_version.udmi_ref $output_file

echo Pubber config from $pubber_config:
cat $pubber_config

echo Check for failure in running pubber...
echo pubber/bin/run $pubber_config
! pubber/bin/run $pubber_config

echo Now recreate the registry from scratch!
echo bin/registrar $site_arg $registrar_project -u
bin/registrar $site_arg $registrar_project -u

echo And check again, but this time with success...
echo pubber/bin/run $pubber_config
pubber/bin/run $pubber_config

echo Successful pubber check passed on clean registry.

if [[ -n $solo_arg ]]; then
    echo Deleting singular entry $solo_arg...
    echo bin/registrar $site_arg $registrar_project -d $solo_arg
    bin/registrar $site_arg $registrar_project -d $solo_arg
    search "Deleting device $solo_arg \(1/1)" out/registrar.log
    search "Deleted 1 devices" out/registrar.log

    echo Sleeping to avoid IoT Core race condition...
    sleep 20

    echo bin/registrar /tmp/registrar_config.json $solo_arg
    bin/registrar /tmp/registrar_config.json $solo_arg

    echo Checking creation of one device
    search "Processing 1 new devices..." out/registrar.log
    search "Processed $solo_arg \(1/1) in [0-9.]+s \(add)" out/registrar.log
    search "Processed 1 \(skipped 0) devices in " out/registrar.log
    search "Updating 0 existing devices" out/registrar.log
    search "Processed 0 \(skipped 0) devices in " out/registrar.log
    echo Done with solo update test for $solo_arg
fi

if [[ -n $UDMI_ALT_REGISTRY ]]; then
    echo Registering alt registry $UDMI_ALT_REGISTRY...
    site_file=$site_arg/cloud_iot_config.json
    cp $site_file $site_file-tmp
    jq ".registry_id = \"$UDMI_ALT_REGISTRY\"" $site_file-tmp > $site_file
    echo bin/registrar $site_arg $registrar_project -u
    bin/registrar $site_arg $registrar_project -u
    mv $site_file-tmp $site_file
    echo Done with registering alt registry
fi
