#!/bin/bash -e

UDMI_ROOT=$(dirname $0)/..
cd $UDMI_ROOT

source etc/shell_common.sh

if [[ $# != 1 ]]; then
   usage PROJECT_SPEC
fi

project_spec=$1
shift

site_path=sites/udmi_site_model

echo Clear out the registries to start from scratch.
bin/registrar $site_path $project_spec -x -d

echo "Munge the model to have just the gateway (no proxied devices)"
metadata=$site_path/devices/GAT-123/metadata.json
jq '.gateway.proxy_ids = []' $metadata | sponge $metadata
proxied=$(fgrep -l gateway_id $site_path/devices/*/metadata.json)
for proxy in $proxied; do
  jq '.gateway.gateway_id = null' $proxy | sponge $proxy
done

bin/registrar $site_path $project_spec GAT-123

[[ ! -f $site_path/devices/GAT-123/out/errors.map ]] || fail Terminating because of gateway error.

entries=$(wc -l < $site_path/out/registration_summary.csv)
[[ $entries == 2 ]] || fail Unexpected registered entries, found $entries

echo Launching bg pubber for testing
pubber_bg GAT-123

echo Enable the gateway to auto-provision
bin/mapper GAT-123 provision

echo Kick off a discovery run for the gateway
bin/mapper GAT-123 discover

echo Waiting for discovery...
sleep 20

echo Extracting results at $(date -u -Is)
bin/registrar $site_path $project_spec

status=$(fgrep discovered_vendor-281 $site_path/out/registration_summary.csv | awk '{print $3}') || true
echo Checking vendor device status is $status
[[ $status == BLOCK, ]] || fail Vendor device status should be BLOCK, was $status

type=$(jq -r .resource_type $site_path/extras/discovered_vendor-20231/cloud_model.json) || true
echo Checking vendor extracted device type $type
[[ $type == DIRECT ]] || fail Vendor device type should be DIRECT, was $type

echo Checking discovered device metadata
addr=$(jq -r .addr $site_path/extras/discovered_vendor-20231/cloud_metadata/udmi_discovered_with.json)
[[ $addr == 20231 ]] || fail Vendor device addr should be 20231, was $addr

first_generation=`jq -r .generation $site_path/discovered_vendor-20231/cloud_metadata/udmi_discovered_with.json`
echo First discovered generation is $first_generation

echo Kick off a second discovery scan to validate updates
bin/mapper GAT-123 discover

echo Waiting 20s for the second discovery to complete...
sleep 20

echo Extracting updated results at $(date -u -Is)
bin/registrar $site_path $project_spec

second_generation=`jq -r .generation $site_path/discovered_vendor-20231/cloud_metadata/udmi_discovered_with.json`
echo Second discovered generation is $second_generation

[[ $first_generation != $second_generation ]] || fail Second discovery generation was not updated!

echo
echo Done with automapper test
