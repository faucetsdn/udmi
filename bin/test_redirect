#!/bin/bash -e

ROOT_DIR=$(dirname $0)/..
cd $ROOT_DIR

if [[ $# != 1 ]]; then
    echo Usage: $0 PROJECT_ID
    false
fi

project_id=$1
shift

if [[ -n `which rot13` ]]; then
   # Project is provided as a secret, so obfuscate to prevent redactions in server-side logs.
   echo 'Using target project (rot13):' $(echo $project_id | rot13)
else
   echo 'Using target project:' $project_id
fi

site_path=sites/udmi_site_model
device_id=AHU-22 # Static device for testing. Needs to be different than other tests scripts so as not to conflict during CI.

site_config=$site_path/cloud_iot_config.json
cloud_region=$(jq -r .cloud_region $site_config)
registry_id=$(jq -r .registry_id $site_config)

serial_no=sequencer-$RANDOM
echo Using pubber with serial $serial_no

PUBBER_OUT=pubber.out

# Ideally use lock files, not grep-and-kill...
pids=`ps ax | fgrep pubber | fgrep java | awk '{print $1}'`
if [[ -n $pids ]]; then
    echo Killing pubber pids $pids
    kill $pids
fi

device_config=/tmp/${device_id}_config.json
cp sites/udmi_site_model/devices/${device_id}/out/generated_config.json $device_config
now_date=$(date -Ins -u | sed -E 's/.{6}\+.*/Z/' | tr , .)
echo Setting config timestamp $now_date
jq .timestamp=\"$now_date\" < $device_config | sponge $device_config

echo Resetting device $device_id config...
validator/bin/reflector $site_path $project_id $device_id update/config:$device_config

echo Writing pubber output to $PUBBER_OUT
echo bin/pubber $site_path $project_id $device_id $serial_no

result=0
timeout 5m bin/pubber $site_path $project_id $device_id $serial_no redirectRegistry=missing > $PUBBER_OUT 2>&1 || result=$?

echo Pubber exit code $result
