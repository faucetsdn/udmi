#!/bin/bash -e

ROOT_DIR=$(dirname $0)/..
cd $ROOT_DIR

if [[ $# != 1 ]]; then
    echo Usage: $0 PROJECT_ID
    false
fi

project_id=$1
shift

if [[ -n `which rot13` ]]; then
   # Project is provided as a secret, so obfuscate to prevent redactions in server-side logs.
   echo 'Using target project (rot13):' $(echo $project_id | rot13)
else
   echo 'Using target project:' $project_id
fi

site_path=sites/udmi_site_model
device_id=AHU-22 # Static device for testing. Needs to be different than other tests scripts so as not to conflict during CI.

serial_no=sequencer-$RANDOM
echo Using pubber with serial $serial_no

site_config=$site_path/cloud_iot_config.json
cloud_region=$(jq -r .cloud_region $site_config)
registry_id=$(jq -r .registry_id $site_config)

PUBBER_OUT=pubber.out

# Ideally use lock files, not grep-and-kill...
pids=`ps ax | fgrep pubber | fgrep java | awk '{print $1}'`
if [[ -n $pids ]]; then
    echo Killing pubber pids $pids
    kill $pids
fi

bin/reset_config $site_path $project_id $device_id

echo bin/pubber $site_path $project_id $device_id $serial_no

echo Writing pubber output to $PUBBER_OUT.1
result=0
#timeout 5m bin/pubber $site_path $project_id $device_id $serial_no redirectRegistry=missing > $PUBBER_OUT.1 2>&1 || result=$?
echo Pubber exit code $result

echo Writing pubber output to $PUBBER_OUT.2
bin/pubber $site_path $project_id $device_id $serial_no > $PUBBER_OUT.2 2>&1 &

# Wait for initial connection, then reset config to redirect
sleep 20

cat <<EOF > endpoint.json
{
  "projectId": "$project_id",
  "registryId": "$registry_id",
  "cloudRegion": "$cloud_region"
}
EOF

base64=$(base64 endpoint.json)

cat <<EOF > endpoint.json
{
  "blobs": {
    "_iot_config": {
      "phase": "final",
      "base64": "$base64"
    }
  }
}
EOF

out_base=$site_path/devices/$device_id/out
jq -s '.[0] * .[1]' $out_base/generated_config.json endpoint.json > $out_base/redirect_config.json

bin/reset_config $site_path $project_id $device_id redirect_config.json
sleep 20
