#!/bin/bash -e

# Force consistent sort order
export LC_ALL=C

ROOT_DIR=$(dirname $0)/..
cd $ROOT_DIR

if [[ $# != 1 ]]; then
    echo Usage: $0 PROJECT_ID
    false
fi
project_id=$1
shift

site_path=sites/udmi_site_model
device_id=AHU-1

serial_no=validator-$RANDOM
echo Using pubber with serial $serial_no

PUBBER_OUT=pubber.out

pids=`ps ax | fgrep pubber | fgrep java | awk '{print $1}'`
if [[ -n $pids ]]; then
    echo Killing pubber pids $pids
    kill $pids
fi

rm -rf $site_path/out/devices

# Prepare auth key used by reflector
mkdir -p $site_path/validator
cp $site_path/devices/AHU-1/rsa_private.pkcs8 $site_path/validator/rsa_private.pkcs8

bin/validator $site_path $project_id &
vpid=$!
sleep 10
echo Started validator pid $vpid

pubber/bin/build

echo Writing pubber output to $PUBBER_OUT
echo bin/pubber $site_path $project_id $device_id $serial_no
bin/pubber $site_path $project_id $device_id $serial_no > $PUBBER_OUT 2>&1 &

WAITING=10
for i in `seq 1 $WAITING`; do
    if fgrep "Connection complete" $PUBBER_OUT; then
        break
    fi
    echo Waiting for pubber startup $((WAITING - i))...
    sleep 2
done

if [[ $i -eq $WAITING ]]; then
    echo pubber startup failed:
    cat $PUBBER_OUT
    false
fi

echo Waiting for system to run for a bit...
sleep 30

pids=`ps ax | fgrep pubber | fgrep java | awk '{print $1}'`
echo Killing pids $vpid $pids
kill $vpid $pids

outfiles=`find $site_path/out/devices -name \*.out | sort` || true
echo Found .out files $outfiles, copying to /tmp/validator.out
more $outfiles > /tmp/validator.out || true
