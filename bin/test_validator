#!/bin/bash -e

# Force consistent sort order
export LC_ALL=C

ROOT_DIR=$(realpath $(dirname $0)/..)
cd $ROOT_DIR

if [[ $# != 1 ]]; then
    echo Usage: $0 PROJECT_ID
    false
fi
project_id=$1
shift

[[ -n $GITHUB_RUN_NUMBER ]] && echo "Workflow run number $GITHUB_RUN_NUMBER" || true
echo 'Using target project:' $project_id

site_path=sites/udmi_site_model
output_file=$site_path/out/validation_report.json
device_id=AHU-1
proxy_id=AHU-22
mkdir -p out

PUBBER_OUT=out/pubber.out
VALIDATOR_OUT=out/validator.out
TRACE_DIR=out/validator_trace
WAITING=10

echo Killing running pubber/validator instances...
ps ax | fgrep pubber | fgrep java | awk '{print $1}' | xargs -r kill || true
ps ax | fgrep validator | fgrep java | awk '{print $1}' | xargs -r kill || true

rm -rf $site_path/out/devices

# Run explicitly so that it's not done in the background when the program is launched.
validator/bin/build
pubber/bin/build

# Have to reset pubber configs before running validator to avoid reflector registry conflict
bin/reset_config $site_path $project_id $device_id
bin/reset_config $site_path $project_id $proxy_id

echo Starting validator, output in $VALIDATOR_OUT
rm -rf $TRACE_DIR
bin/validator $site_path $project_id -w $TRACE_DIR > $VALIDATOR_OUT 2>&1 &
vpid=$!
echo Started validator pid $vpid

echo Waiting for validator to startup...
sleep 10

for i in `seq 1 $WAITING`; do
    if fgrep "Entering message loop" $VALIDATOR_OUT; then
        break
    fi
    echo Waiting for validator startup $((WAITING - i))...
    sleep 2
done

if [[ $i -eq $WAITING ]]; then
    echo validator startup failed:
    cat $VALIDATOR_OUT
    false
fi

echo Checking reported cloud version info
jq .cloud_version.udmi_ref $output_file

function pubber_bg {
    did=$1
    shift
    outfile=$PUBBER_OUT.$did
    serial_no=validator-$RANDOM
    echo Writing pubber output to $outfile, serial no $serial_no
    cmd="bin/pubber $site_path $project_id $did $serial_no $@"
    echo $cmd

    date > $outfile
    echo $cmd >> $outfile
    $cmd >> $outfile 2>&1 &

    # Give a little bit of time to settle before deterministic check
    sleep 10

    for i in `seq 1 $WAITING`; do
        if fgrep "Connection complete" $outfile; then
            break
        fi
        echo Waiting for pubber startup $((WAITING - i))...
        sleep 2
    done

    if [[ $i -eq $WAITING ]]; then
        echo pubber startup failed:
        cat $outfile
        return 1
    fi
}

echo Waiting 60s so that validator is ready and UDMIS registry backoff restrictions clear...
sleep 60

pubber_bg AHU-1 extraField=prlagle
pubber_bg AHU-22 emptyMissing

echo Waiting for system to run for a bit...
cat $VALIDATOR_OUT && timeout 60s tail -f $VALIDATOR_OUT || true

echo Killing running pubber/validator instances...
ps ax | fgrep pubber | fgrep java | awk '{print $1}' | xargs kill || true
ps ax | fgrep validator | fgrep java | awk '{print $1}' | xargs kill || true

TMP_VALIDATOR=/tmp/validator.out

find $site_path/out/devices -name \*.json | sort > $TMP_VALIDATOR
echo Found `wc -l $TMP_VALIDATOR` json output files.

echo Out files for AHU-1:
(cd $site_path/out/devices/AHU-1; ls -lrt *.out)
echo Out files for AHU-22:
(cd $site_path/out/devices/AHU-22; ls -lrt *.out)
outfiles=`find $site_path/out/devices -name \*.out | sort` || true
if [[ -z $outfiles ]]; then
    echo No .out files found in $site_path/out/devices
    false
fi

more $outfiles | sed -E >> $TMP_VALIDATOR \
                     -e "s/[0-9-]{10}T[0-9:]{8}Z/1999-10-20T01:02:03Z/" \
                     -e 's/"message" .*/"message" REDACTED/' \
                     -e 's/"detail" .*/"detail" REDACTED/' \
                     -e "s/Validator.java:[0-9]+/REDACTED/" \
                     -e 's/\\t[a-zA-Z .()$0-9]+\.java:[0-9]+\)\\n/\\tREDACTED\\n/g'

echo diff -u $TMP_VALIDATOR etc/validator.out
diff -u $TMP_VALIDATOR etc/validator.out && echo No mismatch from golden file.
