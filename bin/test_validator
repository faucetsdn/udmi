#!/bin/bash -e

UDMI_ROOT=$(realpath $(dirname $0)/..)
cd $UDMI_ROOT

source etc/shell_common.sh

if [[ $# != 1 ]]; then
    echo Usage: $0 PROJECT_SPEC
    false
fi

project_spec=$1
shift

[[ -n ${GITHUB_RUN_NUMBER:-} ]] && echo "Workflow run number $GITHUB_RUN_NUMBER" || true
echo 'Using target project:' $project_spec

echo "export TARGET_PROJECT=$project_spec"
echo "export UDMI_REGISTRY_SUFFIX=${UDMI_REGISTRY_SUFFIX:-}"
echo "export UDMI_ALT_REGISTRY=${UDMI_ALT_REGISTRY:-}"

site_path=sites/udmi_site_model
iot_config=$site_path/cloud_iot_config.json
output_file=$site_path/out/validation_report.json
mkdir -p out

VALIDATOR_LOG=out/validator.log
VALIDATOR_OUT=out/validator.out
GOLDEN_OUT=etc/validator.out
TRACE_DIR=out/validator_trace
VALIDATOR_WAIT=20

echo Killing running pubber/validator instances...
ps ax | fgrep pubber | fgrep java | awk '{print $1}' | xargs -r kill || true
ps ax | fgrep validator | fgrep java | awk '{print $1}' | xargs -r kill || true

rm -rf $site_path/out/devices

# Sanitize the site_path because some other testing scripts might have corrupted it...
jq 'del(.udmi_namespace)' $iot_config | sponge $iot_config

# Run explicitly so that it's not done in the background when the program is launched.
validator/bin/build
pubber/bin/build

# Have to reset pubber configs before running validator to avoid reflector registry conflict
for device in AHU-1 AHU-22 GAT-123; do
    echo bin/reset_config $site_path $project_spec $device
    bin/reset_config $site_path $project_spec $device
done

touch $site_path/out/validator_start.nop

echo Starting validator, output in $VALIDATOR_LOG, trace in $TRACE_DIR
rm -rf $TRACE_DIR
echo bin/validator $site_path $project_spec -w $TRACE_DIR
bin/validator $site_path $project_spec -w $TRACE_DIR > $VALIDATOR_LOG 2>&1 &
vpid=$!
echo Started validator pid $vpid

echo Waiting for validator to startup...

for i in `seq 1 $VALIDATOR_WAIT`; do
    if fgrep "Entering message loop" $VALIDATOR_LOG; then
        break
    fi
    echo Waiting for validator startup $((VALIDATOR_WAIT - i))...
    sleep 1
done

if [[ $i -eq $VALIDATOR_WAIT ]]; then
    echo validator startup failed:
    cat $VALIDATOR_LOG
    false
fi

echo Checking reported cloud version info
jq .cloud_version.udmi_ref $output_file

pubber_bg AHU-1 extraField=prlagle skewClock
pubber_bg GAT-123 emptyMissing extraPoint=llama fixedSampleRate=2

echo Waiting for system to run for a bit...
cat $VALIDATOR_LOG && timeout 60s tail -f $VALIDATOR_LOG || true

echo Killing running pubber/validator instances...
ps ax | fgrep pubber | fgrep java | awk '{print $1}' | xargs kill || true
ps ax | fgrep validator | fgrep java | awk '{print $1}' | xargs kill || true

find $site_path/out/devices -name \*.json | sort > $VALIDATOR_OUT
echo Found `wc -l $VALIDATOR_OUT` json output files.

echo Out files for AHU-1:
(cd $site_path/out/devices/AHU-1; ls -lrt *.out) || true
echo Out files for AHU-22:
(cd $site_path/out/devices/AHU-22; ls -lrt *.out) || true
echo Out files for GAT-123:
(cd $site_path/out/devices/GAT-123; ls -lrt *.out) || true

outfiles=`find $site_path/out/devices -name \*.out | sort` || true
[[ -n $outfiles ]] || fail No .out files found in $site_path/out/devices

echo Pre-REDACTED output available in $VALIDATOR_OUT.raw
more $outfiles > $VALIDATOR_OUT.raw
sed -E < $VALIDATOR_OUT.raw >> $VALIDATOR_OUT \
    -e 's/[0-9-]{10}T[0-9:.]+Z/REDACTED_TIMESTAMP/g' \
    -e 's/ [0-9]+s / REDACTED_DURATION /g' \
    -e 's/@[^)]+\)/REDACTED_ERROR/' \
    -e 's/Validator.java:[0-9]+/REDACTED_FILE/' \
    -e 's/\\t[a-zA-Z .()$0-9]+\.java:[0-9]+\)\\n/\\tREDACTED_STACK\\n/g'

echo diff -u $VALIDATOR_OUT $GOLDEN_OUT
diff -u $VALIDATOR_OUT $GOLDEN_OUT ||
    fail Mismatch from golden file comparison: $VALIDATOR_OUT $GOLDEN_OUT

echo Checking periodic udmi_config distribution
[[ $site_path/out/udmi_config.json -nt $site_path/out/validator_start.nop ]] ||
    fail UdmiConfig update not received after validator start

echo Done with validator validation
