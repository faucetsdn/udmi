#!/bin/bash -e
#
# Command line wrapper to create a config file, and pass off
# to sequence looper for complete sequence run.
#

UDMI_ROOT=$(realpath $(dirname $0)/..)
source $UDMI_ROOT/etc/shell_common.sh

OUT_DIR=$UDMI_ROOT/out
TEST_LOG=$OUT_DIR/sequencer.out
SCHEMA_OUT=$OUT_DIR/schema.out
SEQUENCER_RES=$OUT_DIR/sequencer.res
log_level=INFO
alt_registry=\"${UDMI_ALT_REGISTRY:-ZZ-REDIRECT-NA}\"
min_stage=PREVIEW
export UDMI_VERSION=$udmi_version

# For cross-env sort stability
export LC_ALL=C

rm -f $TEST_LOG $SCHEMA_OUT

while [[ $1 =~ ^- ]]; do
    if [[ $1 == '-a' ]]; then
        min_stage=ALPHA
    elif [[ $1 == '-v' ]]; then
        log_level=DEBUG
    elif [[ $1 == '-vv' ]]; then
        log_level=TRACE
    else
        echo Unknown option $1
        false
    fi
    shift
done

if [[ $# == 0 ]]; then
    usage [-v] [-vv] [-a] SITE_MODEL PROJECT_ID DEVICE_ID [SERIAL_NO] [TEST_NAMES...]
fi

site_path=$(realpath $1)
shift

if [[ -d $site_path ]]; then
    project_id=$1
    device_id=$2
    shift 2 || fail Missing configuration command line parameters.
fi

if [[ -n $UDMI_REGISTRY_SUFFIX ]]; then
    echo Using registry suffix $UDMI_REGISTRY_SUFFIX
    registry_suffix=\"$UDMI_REGISTRY_SUFFIX\"
else
    registry_suffix=null
fi

DEFAULT_SERIAL=//
serial_no=${1:-$DEFAULT_SERIAL}
shift || true

if [[ $project_id == -- ]]; then
    echo Configuring for mock project use...
    project_id=mock-project
    alt_registry=null
fi

test_names="$@"
udmi_version=`git describe --always --dirty`

cd $UDMI_ROOT
mkdir -p $OUT_DIR

if ! bin/which_venv_pip3; then
    echo ERROR venv pip3 not installed, please run bin/setup_base and try again
    false
fi

if [[ -d $site_path ]]; then
    echo Using site model directory $site_path
    site_model=$site_path
    endpoint=null
elif [[ -f $site_path ]]; then
    echo Using site config file $site_path
    site_model=`jq -r .site_model $site_path`
    [[ $site_model == null ]] && site_model=.
    [[ $site_model =~ ^/ ]] || site_model=$(realpath $(dirname $site_path)/$site_model)
    project_id=`jq -r .project_id $site_path`
    [[ $project_id == null ]] && project_id=
    device_id=`jq -r .device_id $site_path`
    [[ $device_id == null ]] && fail Parameter device_id not defined in config file.
    serial_no=`jq -r .serial_no $site_path`
    [[ $serial_no == null ]] && serial_no=$DEFAULT_SERIAL
    endpoint=`jq .reflector_endpoint $site_path`
    alt_registry=null
else
    echo Site model $site_path not found.
    false
fi

validator/bin/build

# Format of cmdline project_id is {//PROVIDER/}PROJECT (optional PROVIDER)
# e.g. bos-testing-dev or //gcp/bos-testing-dev

if [[ -n $project_id ]]; then
    quoted_id=\"${project_id##*/}\"
else
    quoted_id=null
fi

if [[ $project_id =~ ^// ]]; then
    sans_project=${project_id%/*}
    iot_provider=\"${sans_project#//}\"
else
    iot_provider=null
fi

export SEQUENCER_CONFIG=/tmp/sequencer_config.json

echo Writing config to $SEQUENCER_CONFIG:
cat <<EOF > $SEQUENCER_CONFIG
{
  "iot_provider": $iot_provider,
  "project_id": $quoted_id,
  "site_model": "$site_model",
  "device_id": "$device_id",
  "alt_registry": $alt_registry,
  "registry_suffix": $registry_suffix,
  "serial_no": "$serial_no",
  "log_level": "$log_level",
  "min_stage": "$min_stage",
  "udmi_version": "$udmi_version",
  "udmi_root": "$UDMI_ROOT",
  "reflector_endpoint": $endpoint,
  "key_file": "$site_model/reflector/rsa_private.pkcs8"
}
EOF

cat $SEQUENCER_CONFIG

JARFILE=validator/build/libs/validator-1.0-SNAPSHOT-all.jar
JAVA_CMD="java -cp $JARFILE com.google.daq.mqtt.sequencer.SequenceRunner"
echo $JAVA_CMD $test_names
result=0
$JAVA_CMD $test_names 2>&1 | tee $TEST_LOG

echo
# Sort by test name (6th field)
fgrep 'RESULT ' $TEST_LOG | fgrep NOTICE | sort -k 6 | tee $SEQUENCER_RES

if [[ $(wc -l < $SEQUENCER_RES) -eq 0 ]]; then
    echo No test results found.
    exit 1
fi

# Sort by test name (4th field)
fgrep RESULT $site_model/out/devices/$device_id/RESULT.log | \
    fgrep ' schemas ' | sort -k 3 | tee $SCHEMA_OUT

(source venv/bin/activate && bin/sequencer_report $site_model $device_id)

bin/check_version
