#!/bin/bash -e
#
# Command line wrapper to create a config file, and pass off
# to sequence looper for complete sequence run.
#

UDMI_ROOT=$(realpath $(dirname $0)/..)
source $UDMI_ROOT/etc/shell_common.sh

OUT_DIR=$UDMI_ROOT/out
mkdir -p $OUT_DIR
echo $(date --utc +%Y%m%d-%H%M%S) $0 $@ >> $OUT_DIR/cmd_history.log

JARFILE=validator/build/libs/validator-1.0-SNAPSHOT-all.jar
JAVA_CMD="java -cp $JARFILE com.google.daq.mqtt.sequencer.SequenceRunner"
SEQUENCER_LOG=$OUT_DIR/sequencer.log
SEQUENCER_OUT=$OUT_DIR/sequencer.out
SCHEMA_OUT=$OUT_DIR/schema.out
DEFAULT_SERIAL=//
log_level=INFO
min_stage=PREVIEW
export UDMI_VERSION=$udmi_version

rm -f $SEQUENCER_LOG $SEQUENCER_OUT $SCHEMA_OUT

# Shortcut to run sequencer with a fixed config and cmd-line tests.
# TODO: Make this a better (more standard) command line format in-line with other tools.
if [[ $1 == -- ]]; then
    shift
    $JAVA_CMD $@
    exit 0
fi

while [[ $1 =~ ^- ]]; do
    if [[ $1 == '-a' ]]; then
        min_stage=ALPHA
    elif [[ $1 == '-x' ]]; then
        min_stage="=ALPHA"
    elif [[ $1 == '-v' ]]; then
        log_level=DEBUG
    elif [[ $1 == '-vv' ]]; then
        log_level=TRACE
    else
        echo Unknown option $1
        false
    fi
    shift
done

if [[ $# == 0 ]]; then
    usage [-v] [-vv] [-a] [-x] SITE_MODEL PROJECT_ID DEVICE_ID [SERIAL_NO] [TEST_NAMES...]
fi

site_path=$(realpath $1)
shift

if [[ -d $site_path ]]; then
    project_id=$1
    device_id=$2
    shift 2 || fail Missing configuration command line parameters.

    serial_no=${1:-$DEFAULT_SERIAL}
    shift || true
fi

registry_suffix=null
alt_registry=null

test_names="$@"
udmi_version=`git describe --always --dirty`

cd $UDMI_ROOT

if ! bin/which_venv_pip3; then
    echo ERROR venv pip3 not installed, please run bin/setup_base and try again
    false
fi

source venv/bin/activate

if [[ -d $site_path ]]; then
    echo Using site model directory $site_path
    site_model=$site_path
    iot_config=$site_model/cloud_iot_config.json
    alt_registry=`jq .alt_registry $iot_config`
    endpoint=null
elif [[ -f $site_path ]]; then
    echo Using site config file $site_path
    site_model=`jq -r .site_model $site_path`
    [[ $site_model == null ]] && site_model=.
    [[ $site_model =~ ^/ ]] || site_model=$(realpath $(dirname $site_path)/$site_model)
    project_id=`jq -r .project_id $site_path`
    [[ $project_id == null ]] && project_id=
    device_id=`jq -r .device_id $site_path`
    [[ $device_id == null ]] && fail Parameter device_id not defined in config file.
    serial_no=`jq -r .serial_no $site_path`
    [[ $serial_no == null ]] && serial_no=$DEFAULT_SERIAL
    endpoint=`jq .reflector_endpoint $site_path`
    alt_registry=`jq .alt_registry $site_path`
    registry_suffix=`jq .registry_suffix $site_path`
else
    echo Site model $site_path not found.
    false
fi

if [[ $project_id == -- ]]; then
    echo Configuring for mock project use...
    project_id=mock-project
    alt_registry=null
fi

# Format of cmdline project_id is {//PROVIDER/}PROJECT (optional PROVIDER)
# e.g. bos-testing-dev or //gcp/bos-testing-dev

quoted_namespace=null
quoted_bridge=null
iot_provider=null
if [[ $project_id =~ ^// ]]; then
    no_prefix=${project_id#//}
    iot_provider=\"${no_prefix%%/*}\"
    no_provider=${no_prefix#*/}
    project_id=${no_provider%/*}
    udmi_namespace=${no_provider#$project_id}
    [[ -n $udmi_namespace ]] && quoted_namespace=\"${udmi_namespace#/}\"
elif [[ $project_id =~ @ ]]; then
    iot_provider=\"jwt\"
    quoted_bridge=\"${project_id#*@}\"
    project_id=${project_id%@*}
fi

if [[ -n $project_id ]]; then
    quoted_id=\"${project_id##*/}\"
else
    quoted_id=null
fi

export SEQUENCER_CONFIG=/tmp/sequencer_config.json

if [[ ! $site_path -ef $SEQUENCER_CONFIG ]]; then
    echo Writing config to $SEQUENCER_CONFIG:
    cat <<EOF > $SEQUENCER_CONFIG
{
  "iot_provider": $iot_provider,
  "project_id": $quoted_id,
  "bridge_host": $quoted_bridge,
  "udmi_namespace": $quoted_namespace,
  "site_model": "$site_model",
  "device_id": "$device_id",
  "alt_registry": $alt_registry,
  "registry_suffix": $registry_suffix,
  "shard_count": ${MATRIX_SHARD_COUNT:-null},
  "shard_index": ${MATRIX_SHARD_INDEX:-null},
  "serial_no": "$serial_no",
  "log_level": "$log_level",
  "min_stage": "$min_stage",
  "udmi_version": "$udmi_version",
  "udmi_root": "$UDMI_ROOT",
  "reflector_endpoint": $endpoint,
  "key_file": "$site_model/reflector/rsa_private.pkcs8"
}
EOF
fi

cat $SEQUENCER_CONFIG

validator/bin/build

echo $JAVA_CMD $test_names
result=0
$JAVA_CMD $test_names 2>&1 | tee $SEQUENCER_LOG

echo
echo Extracting sequence results:
# Sort by test name (6th field)
egrep 'RESULT |CPBLTY ' $SEQUENCER_LOG | fgrep NOTICE | sort -k 6 | \
    sed -e 's/.* NOTICE //' | tee $SEQUENCER_OUT

[[ -s $SEQUENCER_OUT ]] || fail No test results found.

# Sort by test name (3th field)
fgrep RESULT $site_model/out/devices/$device_id/RESULT.log | \
    fgrep ' schemas ' | sort -k 3 | tee $SCHEMA_OUT
more $site_model/out/devices/$device_id/RESULT.log $SCHEMA_OUT | cat

bin/sequencer_report $site_model $device_id

bin/check_version
