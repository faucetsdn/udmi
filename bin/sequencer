#!/bin/bash -e
#
# Command line wrapper to create a config file, and pass off
# to sequence looper for complete sequence run.
#

ROOT_DIR=$(realpath $(dirname $0)/..)
TEST_LOG=$ROOT_DIR/out/sequencer.out
SCHEMA_OUT=$ROOT_DIR/out/schema.out
log_level=INFO
alt_registry=${UDMI_ALT_REGISTRY:-ZZ-REDIRECT-NA}
min_stage=PREVIEW
export UDMI_VERSION=`cd $ROOT_DIR; git describe`

# For cross-env sort stability
export LC_ALL=C

rm -f $TEST_LOG $SCHEMA_OUT

while [[ $1 =~ ^- ]]; do
    if [[ $1 == '-a' ]]; then
        min_stage=ALPHA
    elif [[ $1 == '-v' ]]; then
        log_level=DEBUG
    elif [[ $1 == '-vv' ]]; then
        log_level=TRACE
    else
        echo Unknown option $1
        false
    fi
    shift
done

if [[ $# < 3 ]]; then
    echo Usage: $0 [-v] [-vv] [-a] SITE_MODEL PROJECT_ID DEVICE_ID [SERIAL_NO] [TEST_NAMES...]
    false
fi

site_model=$(realpath $1)
project_id=$2
device_id=$3
shift 3

if [[ -n $UDMI_REGISTRY_SUFFIX ]]; then
    echo Using registry suffix $UDMI_REGISTRY_SUFFIX
    registry_suffix=\"$UDMI_REGISTRY_SUFFIX\"
else
    registry_suffix=null
fi

serial_no=${1:-//}
shift || true

if [[ $project_id == -- ]]; then
    echo Configuring for mock project use...
    project_id=mock-project
    alt_registry=
fi

test_names="$@"
udmi_version=`git describe --always --dirty`

cd $ROOT_DIR

if [[ ! -d $site_model ]]; then
    echo Site model $site_model not found.
    false
fi

validator/bin/build

# Format of cmdline project_id is {//PROVIDER/}PROJECT (optional PROVIDER)
# e.g. bos-testing-dev or //gcp/bos-testing-dev

if [[ -n $project_id ]]; then
    quoted_id=\"${project_id##*/}\"
else
    quoted_id=null
fi

if [[ $project_id =~ ^// ]]; then
    sans_project=${project_id%/*}
    iot_provider=\"${sans_project#//}\"
else
    iot_provider=null
fi

export VALIDATOR_CONFIG=/tmp/validator_config.json

echo Writing config to $VALIDATOR_CONFIG:
cat <<EOF > $VALIDATOR_CONFIG
{
  "iot_provider": $iot_provider,
  "project_id": $quoted_id,
  "site_model": "$site_model",
  "device_id": "$device_id",
  "alt_registry": "$alt_registry",
  "registry_suffix": $registry_suffix,
  "serial_no": "$serial_no",
  "log_level": "$log_level",
  "min_stage": "$min_stage",
  "udmi_version": "$udmi_version",
  "udmi_root": "$ROOT_DIR",
  "key_file": "$site_model/reflector/rsa_private.pkcs8"
}
EOF

cat $VALIDATOR_CONFIG

JARFILE=validator/build/libs/validator-1.0-SNAPSHOT-all.jar
JAVA_CMD="java -cp $JARFILE com.google.daq.mqtt.sequencer.SequenceRunner"
echo $JAVA_CMD $test_names
result=0
$JAVA_CMD $test_names 2>&1 | tee $TEST_LOG

echo
# Sort by test name (6th field)
fgrep 'RESULT ' $TEST_LOG | fgrep NOTICE | sort -k 6 | tee out/sequencer.res

if [[ $(wc -l < out/sequencer.res) -eq 0 ]]; then
    echo No test results found.
    exit 1
fi

# Sort by test name (4th field)
fgrep RESULT $site_model/out/devices/$device_id/RESULT.log | \
    fgrep ' schemas ' | sort -k 3 | tee $SCHEMA_OUT

bin/check_version
