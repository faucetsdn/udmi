#!/bin/bash -e
#
# Command line wrapper to create a config file, and pass off
# to sequence looper for complete sequence run.
#

ROOT_DIR=$(realpath $(dirname $0)/..)
TEST_LOG=/tmp/test_log.txt
log_level=INFO
UDMI_ALT_REGISTRY=ZZ-REDIRECT-NA

if [[ $1 == '-v' ]]; then
    log_level=DEBUG
    shift
fi

if [[ $1 == '-v' || $1 == '-vv' ]]; then
    log_level=TRACE
    shift
fi

if [[ $# < 3 ]]; then
    echo Usage: $0 SITE_PATH PROJECT_ID DEVICE_ID [SERIAL_NO] [TEST_NAMES...]
    false
fi

site_path=$(realpath $1)
project_id=$2
device_id=$3
shift 3

serial_no=${1:-//}
shift || true

test_names="$@"
udmi_version=`git describe --always --dirty`

cd $ROOT_DIR

if [[ ! -d $site_path ]]; then
    echo Site model $site_path not found.
    false
fi

validator/bin/build

export VALIDATOR_CONFIG=/tmp/validator_config.json

echo Writing config to $VALIDATOR_CONFIG:
cat <<EOF > $VALIDATOR_CONFIG
{
  "project_id": "$project_id",
  "site_model": "$site_path",
  "device_id": "$device_id",
  "alt_registry": "$UDMI_ALT_REGISTRY",
  "serial_no": "$serial_no",
  "log_level": "$log_level",
  "udmi_version": "$udmi_version",
  "key_file": "$site_path/validator/rsa_private.pkcs8"
}
EOF

cat $VALIDATOR_CONFIG

JARFILE=validator/build/libs/validator-1.0-SNAPSHOT-all.jar
JAVA_CMD="java -cp $JARFILE com.google.daq.mqtt.sequencer.SequenceRunner"
echo $JAVA_CMD $test_names
result=0
$JAVA_CMD $test_names 2>&1 | tee $TEST_LOG

echo
# Sort by test name (6th field)
fgrep 'RESULT ' $TEST_LOG | sort -k 6 | tee /tmp/sequencer.out

if [[ `wc -l < /tmp/sequencer.out` -eq 0 ]]; then
    echo No test results found.
    exit 1
fi

bin/check_version

echo SUMMARY `awk '{print $5}' < /tmp/sequencer.out`
