#!/bin/bash -e

UDMI_ROOT=$(realpath $(dirname $0)/..)
source $UDMI_ROOT/etc/shell_common.sh

OUT_DIR=$UDMI_ROOT/out
mkdir -p $OUT_DIR
echo $(date --utc +%Y%m%d-%H%M%S) $0 $@ >> $OUT_DIR/cmd_history.log

[[ $# == 0 ]] && usage 'SITE_{PATH/FILE}' [PROJECT_ID] [SUBSCRIPTION_ID]

site_path=$(realpath $1)
shift

if [[ -n $1 ]]; then
    project_id=$1
    shift
fi

subscription=null
if [[ -n ${1:-} && ! $1 =~ ^- ]]; then
    subscription=\"$1\"
    shift
fi

quoted_namespace=null
quoted_bridge=null
iot_provider=null
if [[ $project_id =~ ^// ]]; then
    no_prefix=${project_id#//}
    iot_provider=\"${no_prefix%%/*}\"
    no_provider=${no_prefix#*/}
    project_id=${no_provider%/*}
    udmi_namespace=${no_provider#$project_id}
    [[ -n $udmi_namespace ]] && quoted_namespace=\"${udmi_namespace#/}\"
elif [[ $project_id =~ @ ]]; then
    iot_provider=\"jwt\"
    quoted_bridge=\"${project_id#*@}\"
    project_id=${project_id%@*}
fi

if [[ -n $project_id ]]; then
    quoted_id=\"${project_id##*/}\"
else
    quoted_id=null
fi

if [[ -f $site_path ]]; then
    site_file=$site_path
    [[ -z $project_id ]] || fail project id specificed with config file
    rm -f /tmp/validator_config.json
elif [[ ! -d $site_path ]]; then
    echo $site_path not found.
    false
elif [[ ! -f $site_path/cloud_iot_config.json ]]; then
    echo $site_path/cloud_iot_config.json not found.
    false
elif [[ -n $project_id ]]; then
    site_file=/tmp/validator_config.json
    echo Writing config to $site_file
    cat <<EOF > $site_file
{
  "iot_provider": $iot_provider,
  "project_id": $quoted_id,
  "bridge_host": $quoted_bridge,
  "udmi_namespace": $quoted_namespace,
  "site_model": "$site_path",
  "feed_name": ${subscription}
}
EOF
else
    fail unknown configuration options
fi

echo Using site file $site_file:
cat $site_file

echo Running tools version $udmi_version

$UDMI_ROOT/validator/bin/validate $site_file $* 2>&1 | tee $OUT_DIR/validator.log

bin/check_version
