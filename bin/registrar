#!/bin/bash -e

ROOT_DIR=$(dirname $0)/..
config_file=/tmp/registrar_config.json

if [ $# == 0 ]; then
    echo $0 SITE_PATH [PROJECT_ID] [OPTIONS] [devices...]
    false
fi

site_path=$1
shift
if [[ -z $1 || $1 =~ ^- ]]; then
    echo No project ID supplied.
else
    project_id=$1
    shift
fi

iot_config=$site_path/cloud_iot_config.json
if [[ -d $site_path && ! -f $iot_config ]]; then
    echo Config file not found: $iot_config
    false
elif [[ -z $project_id ]]; then
    echo No project defined, dry run only.
fi

if [[ -n $UDMI_REGISTRY_SUFFIX ]]; then
    echo Using registry suffix $UDMI_REGISTRY_SUFFIX
    registry_suffix=\"$UDMI_REGISTRY_SUFFIX\"
else
    registry_suffix=null
fi

echo Building validator...
$ROOT_DIR/validator/bin/build > /dev/null

echo Running tools version `(cd $ROOT_DIR; git describe)`

# Format of cmdline project_id is {//PROVIDER/}PROJECT (optional PROVIDER)
# e.g. bos-testing-dev or //gcp/bos-testing-dev

if [[ -n $project_id ]]; then
    quoted_id=\"${project_id##*/}\"
else
    quoted_id=null
fi

if [[ $project_id =~ ^// ]]; then
    sans_project=${project_id%/*}
    iot_provider=\"${sans_project#//}\"
else
    iot_provider=null
fi

if [[ -f $site_path ]]; then
    config_file=$site_path
else
    echo Writing config to $config_file
    cat <<EOF > $config_file
{
  "iot_provider": $iot_provider,
  "project_id": $quoted_id,
  "site_model": "$site_path",
  "registry_suffix": $registry_suffix
}
EOF
fi

echo $config_file:
cat $config_file
echo

$ROOT_DIR/validator/bin/registrar $config_file $* 2>&1

bin/check_version
