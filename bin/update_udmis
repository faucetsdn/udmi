#!/bin/bash -e

ROOT=$(realpath $(dirname $0)/..)

if (( $# < 2 || $# > 3 )); then
    echo Usage: $0 SITE_MODEL PROJECT_ID [IMAGE_TAG]
    false
fi

site_model=$(realpath $1)
project_id=$2
shift 2
REFLECTOR_CONFIG=/tmp/reflector_config.json

if [[ -n $1 ]]; then
    update_to=$1
    shift
fi

cd $ROOT

full_hash=$(git rev-parse HEAD)

if [[ -z $update_to ]]; then
    git_branch=$(git rev-parse --abbrev-ref HEAD)
    git_remote=$(git config --get branch.$git_branch.remote)
    git_url=$(git config --get remote.$git_remote.url)
    git_prefix=${git_url%.*}
    git_prefix=${git_prefix#*.com/}
    git_repo=${git_prefix#*.com:}
    update_to=ghcr.io/${git_repo}:udmis-g${full_hash:0:9}
fi

echo Updating udmis install to $update_to

quoted_namespace=null
quoted_bridge=null
iot_provider=null
if [[ $project_id =~ ^// ]]; then
    no_prefix=${project_id#//}
    iot_provider=\"${no_prefix%%/*}\"
    no_provider=${no_prefix#*/}
    project_id=${no_provider%/*}
    udmi_namespace=${no_provider#$project_id}
    [[ -n $udmi_namespace ]] && quoted_namespace=\"${udmi_namespace#/}\"
elif [[ $project_id =~ @ ]]; then
    iot_provider=\"jwt\"
    quoted_bridge=\"${project_id#*@}\"
    project_id=${project_id%@*}
fi

if [[ -n $project_id ]]; then
    quoted_id=\"${project_id##*/}\"
else
    quoted_id=null
fi

echo Writing config to $REFLECTOR_CONFIG
cat <<EOF > $REFLECTOR_CONFIG
{
  "iot_provider": $iot_provider,
  "project_id": $quoted_id,
  "udmi_namespace": $quoted_namespace,
  "bridge_host": $quoted_bridge,
  "site_model": "$site_model",
  "update_to": "$update_to"
}
EOF

cat $REFLECTOR_CONFIG
validator/bin/reflector $REFLECTOR_CONFIG

