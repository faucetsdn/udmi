#!/bin/bash -e

TYPES="{ CA, CERT, RS256, RS256_X509, ES256, ES256_X509 }"

if [ "$#" != 2 ]; then
    echo $0 type out_dir
    echo Where type is one of: $TYPES
    false
fi

type=$1
cd $2
shift 2

if [[ $(basename $PWD) == reflector ]]; then
    echo Generating self-signed cert for server admin
    CA_DIR=$PWD
    SUBJ=server
else
    CA_DIR=../../reflector
    SUBJ=client
fi

TARGET_HOST=localhost
if [[ $type =~ ^CERT/ || $type =~ ^CA/ ]]; then
    TARGET_HOST=${type#*/}
    type=${type%/*}
    echo Generating $type with altname $TARGET_HOST
fi

CA_CRT=$CA_DIR/ca.crt
CA_SRL=$CA_DIR/ca.srl
CA_KEY=$CA_DIR/rsa_private.pem
OPTS_509=/tmp/x509opts.txt

echo "subjectAltName=DNS:${TARGET_HOST}, IP:127.0.0.1, DNS:localhost" > $OPTS_509
x509opts="-days 3650 -extfile $OPTS_509"

if [[ $type == CA ]]; then
    CERT_SUBJ=/CN=ca
    echo Generating CA and server certs in $PWD
    openssl req -new -x509 -days 3650 -key $CA_KEY -out ca.crt -subj $CERT_SUBJ
    openssl genrsa -out server.key 2048
    openssl req -new -key server.key -out server.csr -subj /CN=$SUBJ
    openssl x509 -req -in server.csr -CA ca.crt -CAkey $CA_KEY -CAcreateserial -out server.crt $x509opts
    echo Created certificate authority keys in $PWD
elif [ $type == CERT ]; then
    echo Generating self-signed cert from CA defined in $(realpath $CA_DIR)
    echo Generating cert for device keys in $PWD
    private_key=$(ls *.pkcs8)
    key_prefix=${private_key%%_*}
    openssl req -new -key ${key_prefix}_private.pem -out ${key_prefix}_private.csr -subj /CN=$SUBJ
    openssl x509 -req -in ${key_prefix}_private.csr -CA $CA_CRT -CAkey $CA_KEY -CAcreateserial -out ${key_prefix}_private.crt $x509opts
elif [ $type == RS256 ]; then
    openssl genrsa -out rsa_private.pem 2048
    openssl rsa -in rsa_private.pem -pubout -out rsa_public.pem
elif [ $type == RS256_X509 ]; then
    openssl genrsa -out rsa_private.pem 2048
    openssl rsa -in rsa_private.pem -pubout -out rsa_public.pem
    openssl req -x509 -nodes -newkey rsa:2048 -keyout rsa_private.pem -days 1000000 -out rsa_cert.pem -subj /CN=unused
elif [ $type == ES256 ]; then
    openssl ecparam -genkey -name prime256v1 -noout -out ec_private.pem
    openssl ec -in ec_private.pem -pubout -out ec_public.pem
elif [ $type == ES256_X509 ]; then
    openssl ecparam -genkey -name prime256v1 -noout -out ec_private.pem
    openssl ec -in ec_private.pem -pubout -out ec_public.pem
    openssl req -x509 -new -key ec_private.pem -out ec_cert.pem -days 1000000 -subj /CN=unused
else
    echo Unknown key type $type. Try one of $TYPES
    false
fi

if [ -f rsa_private.pem ]; then
    openssl pkcs8 -topk8 -inform PEM -outform DER -in rsa_private.pem -nocrypt > rsa_private.pkcs8
else
    openssl pkcs8 -topk8 -inform PEM -outform DER -in ec_private.pem -nocrypt > ec_private.pkcs8
fi

echo Done with keygen.
