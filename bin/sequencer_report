#!/usr/bin/env python3
# Might need to run `source venv/bin/activate` to get dependencies to work.
#
"""Generate markdown report from sequencer results."""
import argparse
from collections.abc import Iterable
import copy
from dataclasses import dataclass, field
import json
import os
import re
import sys
from typing import Callable
import jinja2

TEMPLATE_PATH = "etc/sequencer_report.md.template"
OUT_FILE = "results.md"

# minimum set of schemas (incase device doesn't publish given message type)
SCHEMAS = ["state_update", "event_pointset", "event_system"]

# stages for column headers
STAGES = ["stable", "beta", "preview", "alpha"]

# stages to consider for a pass

STAGES_FOR_PASS = ["stable", "beta"]
REFERENCE_SEQUENCES_DIR = "validator/sequences"
CHECKMARK = "✓"
CROSS = "✕"


def first_occurence(iteratable: Iterable, predicate: Callable) -> int:
  """Returns the index at which an iteratable matches the predicate."""
  for i, v in enumerate(iteratable):
    try:
      if predicate(v):
        return i
    # pylint: disable-next=bare-except
    except:
      pass
  raise ValueError()


def sanitize(string: str):
  """Sanitize string for safe displaying"""
  sanitized = string.replace("\n", "; ")
  return sanitized


@dataclass(kw_only=True,unsafe_hash=True, eq=True, order=True)
class TestResult:
  """Container for test result."""

  bucket: str = ""
  name: str = ""
  description: str = ""
  result: str = ""
  stage: str = ""
  message: str = ""
  score: int = 0
  total: int = 0

  def passed(self):
    if self.result == "pass":
      return True
    if self.result == "fail":
      return False
    return None


class SequenceStep(list):
  pass


class Sequence:
  """Loads the sequence steps for a given testresults"""

  # The line number inside the sequence.md file where the first sequence starts
  START_LINE = 5

  # What exact raw text a single step prefixed with
  STEP_PREFIX = "1. "

  # Universal indent on each line
  PADDING = 4

  FILE_NAME = "sequence.md"

  def __init__(self, test: TestResult, reference_dir: str, results_dir: str):
    self.sequence_name = test.name
    self.description = None
    self.test = test
    self.act = []
    self.ref = []

    self.act_path = os.path.join(results_dir, test.name, Sequence.FILE_NAME)
    self.ref_path = os.path.join(reference_dir, test.name, Sequence.FILE_NAME)

    if not os.path.isfile(self.act_path):
      print(f"Missing input file: {self.act_path}")
      sys.exit(1)

    with open(self.act_path, encoding="utf-8") as f:
      self.act_text = f.read()

    if not os.path.isfile(self.ref_path):
      print(f"Missing reference file: {self.ref_path}")
      self.ref_text = "1. Missing input file"
    else:
      with open(self.ref_path, encoding="utf-8") as f:
        self.ref_text = f.read()

    self.act = Sequence.post_process_actual_results(
        Sequence.get_steps(self.act_text)
    )

    self.ref = Sequence.get_steps(self.ref_text)

    self.formatted = Sequence.format(self.ref, self.act, test)

  def __repr__(self):
    return self.formatted

  @classmethod
  def post_process_actual_results(cls, results: list[SequenceStep]):
    """post processing of loaded results"""
    # remove the last item if it's a failed test
    try:
      if results[-1][0][:14] == "1. Test failed":
        results.pop(-1)
    except IndexError:
      pass
    return results

  @classmethod
  def get_steps(cls, text: str) -> list[SequenceStep]:
    """returns steps from the contents of a sequence.md file."""
    buffer = []
    steps = []

    try:
      file_lines = text.splitlines()
      start_index = first_occurence(file_lines, lambda x: x[:2] == "1.")
      sequence_lines = file_lines[start_index:]

      for line in reversed(sequence_lines):
        buffer.insert(0, line)
        if re.match(cls.STEP_PREFIX, line):
          steps.insert(0, SequenceStep(buffer.copy()))
          buffer.clear()
    # pylint: disable-next=bare-except
    except:
      pass
    return steps

  @staticmethod
  def indent(line: str, indent: int, prefix: str = "") -> str:
    """Adds a fixed width indent of length 'indent' with an optional prefix"""
    return prefix.ljust(indent, " ") + line

  @staticmethod
  def longest_line_length(lines: list[str]) -> int:
    """Returns the length of the longest string in a list of strings."""
    return max(len(l) for l in lines)

  @staticmethod
  def failing_step(act: list[SequenceStep], result: str = "") -> int:
    """Returns the index number of the step at which a sequence failed.

    If the sequence passed, the returned index is out of bounds
    """
    # Special case of empty actual sequence
    if len(act) == 0:
      return 0

    # The text contents of a sequence may (though shouldn't) differ from the
    # reference spec, but a step is a step, so use lengths
    if result == "pass":
      return len(act)

    # -1 because we've taken the failing element out of the list
    return len(act) - 1

  @staticmethod
  def classify_steps(
      ref: list[SequenceStep], act: list[SequenceStep], result=""
  ) -> (list[SequenceStep], SequenceStep, list[SequenceStep]):
    fail_index = Sequence.failing_step(act, result)
    failing = []
    not_done = []

    completed = act[:fail_index]

    try:
      failing = ref[fail_index]
      not_done = ref[fail_index + 1 :]
    except IndexError:
      pass
    return completed, failing, not_done

  @staticmethod
  def format(
      ref: list[SequenceStep], act: list[SequenceStep], result: TestResult
  ) -> str:
    f = []
    step_count = 0

    completed, failing, not_done = Sequence.classify_steps(
        ref, act, result.result
    )

    for step in completed:
      step_count += 1
      unnumbered_line = step.pop(0)[len(Sequence.STEP_PREFIX) :]
      f.append(
          Sequence.indent(
              f"{step_count}. {unnumbered_line}", Sequence.PADDING, CHECKMARK
          )
      )
      for l in step:
        f.append(Sequence.indent(l, Sequence.PADDING))

    if failing:
      step_count += 1
      longest_line_length = Sequence.longest_line_length(failing)
      # + 3 is for the additional " X"
      dash_width = longest_line_length + Sequence.PADDING + 3
      unnumbered_line = failing.pop(0).ljust(longest_line_length, " ")[
          len(Sequence.STEP_PREFIX) :
      ]
      f.append("")
      f.append("-" * dash_width)
      f.append(
          Sequence.indent(f"{step_count}. {unnumbered_line} {CROSS}", 4, CROSS)
      )
      for l in failing:
        f.append(
            # pylint: disable-next=line-too-long
            f"{Sequence.indent(l.ljust(longest_line_length, ' '), 4, CROSS)} {CROSS}"
        )
      f.append("-" * dash_width)
      f.append("")

    if not_done:
      for step in not_done:
        step_count += 1
        unnumbered_line = step.pop(0)[len(Sequence.STEP_PREFIX) :]
        f.append(
            Sequence.indent(
                f"{step_count}. {unnumbered_line}", Sequence.PADDING
            )
        )
        for l in step:
          f.append(Sequence.indent(l, Sequence.PADDING))

    return "\n".join(f)


class TemplateHelper:
  """Collection of helper functions made available within Jinja template."""

  @staticmethod
  def pretty_dict(thing: dict):
    """Pretty string repr of dictionary, e.g. key1: value1, key2: value2."""
    if not isinstance(thing, dict):
      return ""
    return ", ".join([": ".join([k, v]) for k, v in thing.items()])

  @staticmethod
  def md_table_header(cols: int):
    """Generate md table headers ( |---|--...) based on no. of cols."""
    return " --- ".join(["|"] * (cols + 1))

  @staticmethod
  def result_icon(result):
    """Textural representation of Boolean or None values."""
    if result is True:
      return CHECKMARK
    if result is False:
      return CROSS
    return "-"


@dataclass
class FeatureStage:
  """Container for scored points and total points for a feature and stage.

  Arguments:
    scored: Number of points scored for a given feature at a given stage.
    total: Total points which could possibly have attained.
    stage: The stage e.g. BETA, STABLE, etc.
    tests: List of tests for this feature at the given stage.
  """

  scored: int = 0
  total: int = 0
  stage: str = ""
  tests: list = field(default_factory=list)

  def add(self, *, test_score:int, test_total:int):
    self.total += test_total
    self.scored += test_score

  def has(self):
    """Did the sequencer results have this feature & stage combination?."""
    return self.total > 0

  # TODO This is logic, needs to reside within sequencer itself
  def passed(self):
    """Was the feature & stage combination a pass (full marks)."""
    return self.total > 0 and self.scored == self.total


@dataclass
class SchemaResult:
  """Container for Schema results."""

  schema: str = ""
  stage: str = ""
  test_name: str = ""
  result: str = ""

  def passed(self):
    if self.result == "pass":
      return True
    if self.result == "fail":
      return False
    return None


class SequencerReport:
  """Results of a single sequencer run."""

  def __init__(self, site_path: str, device_id: str):
    self.site_path = site_path
    self.device_id = device_id
    self.results_path = os.path.join(
        site_path, f"out/sequencer_{device_id}.json"
    )
    self.sequences_path = os.path.join(
        site_path, f"out/devices/{device_id}/tests"
    )

    with open(self.results_path, encoding="utf-8") as f:
      self.results_json = json.load(f)

    self.start_time = self.results_json["start_time"]
    self.end_time = self.results_json["status"]["timestamp"]
    self.status_message = self.results_json["status"]["message"]

    self._load_test_results()
    self._load_schema_results()
    self._load_device_metadata()
    self._load_sequences()

  def _load_sequences(self):
    self.sequences = {
        name: Sequence(result, REFERENCE_SEQUENCES_DIR, self.sequences_path)
        for name, result in self.results.items()
    }

  def _load_schema_results(self):
    """Loads and processes schema validation results."""
    self.schema_results = []
    for schema, value in self.results_json["schemas"].items():
      for test_name, result in value["sequences"].items():
        self.schema_results.append(
            SchemaResult(schema, result["stage"], test_name, result["result"])
        )

    # Ensure all results include at least items from SCHEMAS set of schemas
    schemas = SCHEMAS[:]
    schemas.extend(
        x.schema for x in self.schema_results if x.schema not in schemas
    )

    self.schema_results_by_schema = {
        k: all_or_none(
            [x.passed() for x in self.schema_results if x.schema == k]
        )
        for k in schemas
    }

    self.schema_results_by_stage = {
        k: all_or_none(
            [x.passed() for x in self.schema_results if x.stage == k]
        )
        for k in self.stages
    }

  def _load_device_metadata(self):
    """Loads device metadata.json and sets used attributes."""
    self.metadata_path = os.path.join(
        self.site_path, f"devices/{self.device_id}/metadata.json"
    )
    try:
      with open(self.metadata_path, encoding="utf-8") as f:
        self.metadata = json.load(f)
    except Exception as e:
      raise e

    self.device_make = (
        self.metadata.get("system", {}).get("hardware", {}).get("make", "")
    )
    self.device_model = (
        self.metadata.get("system", {}).get("hardware", {}).get("model", "")
    )
    self.device_software = self.metadata.get("system", {}).get("software")

    self.cloud_iot_config_path = os.path.join(
        self.site_path, "cloud_iot_config.json"
    )

    self.gateway = (
        self.metadata.get("gateway", {}).get("gateway_id")
    )

  def has_stage(self, stage: str):
    """Checks if sequencer report has any tests at given stage."""
    all_features = [x[stage] for x in self.features.values()]
    return any(x.total > 0 for x in all_features)

  def _load_test_results(self):
    """Load sequencer test results and features."""
    results = {}
    features = {}
    stages_template = {s: FeatureStage(stage=s) for s in STAGES}
    for feature, sequences in self.results_json["features"].items():
      features[feature] = copy.deepcopy(stages_template)
      for name, result in sequences["sequences"].items():
        results[name] = TestResult(
            bucket=feature,
            name=name,
            description=result.get("summary", ""),
            result=result["result"],
            stage=result["stage"],
            message=sanitize(result["status"]["message"]),
            score=result["scoring"]["value"],
            total=result["scoring"]["total"],
        )

        features[feature][result["stage"]].add(
          test_score=result["scoring"]["value"],
          test_total=result["scoring"]["total"])
        features[feature][result["stage"]].tests.append(result)

    self.results = {
        x: results[x]
        for x in sorted(
            results.keys(), key=lambda k: (results[k].bucket, results[k].name)
        )
    }

    self.features = dict(sorted(features.items()))

    # overall result for feature (pass, fail, n/a)
    self.overall_features = {
        k: all_or_none([
            results.passed()
            for stage, results in features.items()
            if stage in STAGES_FOR_PASS and results.has()
        ])
        for k, features in self.features.items()
    }

    self.stages = [x for x in STAGES if self.has_stage(x)]

    self.results_by_feature = {
        f: [x for x in self.results.values() if x.bucket == f]
        for f in self.features
    }

  def __repr__(self):
    return str(self.results)


def all_or_none(results: list[bool]):
  """Passes list to all, or return None if list is empty."""
  if not results:
    return None
  return all(results)


def parse_command_line_args():
  parser = argparse.ArgumentParser()
  parser.add_argument("site_model", type=str, help="path to site model")
  parser.add_argument("device_id", type=str, help="device_path")
  return parser.parse_args()


def main():
  args = parse_command_line_args()
  site_model = args.site_model
  device_id = args.device_id

  report = SequencerReport(site_model, device_id)

  environment = jinja2.Environment(autoescape=False)
  environment.filters["pretty_dict"] = TemplateHelper.pretty_dict
  environment.filters["md_table_header"] = TemplateHelper.md_table_header
  environment.filters["result_icon"] = TemplateHelper.result_icon

  template_file_path = os.path.join(sys.path[0], "../", TEMPLATE_PATH)
  with open(template_file_path, encoding="utf-8") as f:
    template = environment.from_string(f.read())

  output = template.render(report=report)

  output_file = os.path.join(site_model, f"out/devices/{device_id}", OUT_FILE)

  with open(output_file, "w", encoding="utf-8") as f:
    f.write(output)

  print(f"Report saved to: {output_file}")


if __name__ == "__main__":
  main()
