#!/usr/bin/env python3

import hashlib
import json
import re
import os
import shutil
import sys

GENCODE_MARKER = '@@ '
CATEGORY_MARKER = '* '
CATEGORY_REGEX = ' *\\* _([a-z]+)_: (\(\*\*([A-Z]+)\*\*\) )?(.*)'
JSON_FORMAT = '%s%s{ "pattern": "^%s$" }'

JAVA_DESCRIPTION = "\n%s// %s\n"
JAVA_TARGET = '%spublic static final String %s = "%s";\n'
JAVA_LEVEL = '%spublic static final Level %s_LEVEL = %s;\n'
JAVA_MAP_ADD = '%sstatic { LEVEL.put(%s, %s); }\n'

doc_in = os.path.join('docs/specs/categories.md')
schema_in = os.path.join('etc/category.json')
schema_out = os.path.join('schema/category.json')
java_in = os.path.join('etc/Category.java')
java_out = os.path.join('gencode/java/udmi/schema/Category.java')

def read_categories():
    categories = []
    prefix = []
    previous = -1
    group = None
    with open(doc_in) as doc:
        while line := doc.readline():
            indent = line.find(CATEGORY_MARKER)//2
            match = re.match(CATEGORY_REGEX, line)
            if indent < 0 or not match:
                continue
            if indent < previous:
                for _ in range(indent, previous):
                    rem = prefix.pop(len(prefix) - 1)
            elif indent > previous:
                if group:
                    prefix.append(group)
            previous = indent
            group = match.group(1)
            category = '.'.join(prefix + [group])
            level = match.group(3)
            description = match.group(4)
            if level:
                entry = (category, level, description)
                categories.append(entry)
    return categories

def write_schema_out(categories):
    with open(schema_in) as inp:
        with open(schema_out, 'w') as out:
            while line := inp.readline():
                index = line.find(GENCODE_MARKER)
                if index >= 0:
                    write_schema_categories(out, line[0:index], categories)
                else:
                    out.write(line)

def write_schema_categories(out, indent, categories):
    prefix = ''
    for category in categories:
        target = category[0].replace('.', '\\\\.')
        out.write(JSON_FORMAT % (prefix, indent, target))
        prefix = ',\n'
    out.write('\n')

def write_java_out(categories):
    os.makedirs(os.path.dirname(java_out), exist_ok=True)
    with open(java_in) as inp:
        with open(java_out, 'w') as out:
            while line := inp.readline():
                index = line.find(GENCODE_MARKER)
                if index >= 0:
                    indent = line[0:index]
                    write_java_categories(out, indent, categories)
                else:
                    out.write(line)

def write_java_categories(out, indent, categories):
    for category in categories:
        target = category[0]
        level = category[1]
        desc = category[2]
        const = target.replace('.', '_').upper()
        out.write(JAVA_DESCRIPTION % (indent, desc))
        out.write(JAVA_TARGET % (indent, const, target))
        out.write(JAVA_LEVEL % (indent, const, level))
        out.write(JAVA_MAP_ADD % (indent, const, level))


categories = read_categories()
write_schema_out(categories)
write_java_out(categories)
