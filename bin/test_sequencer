#!/bin/bash -e

# Force consistent sort order
export LC_ALL=C

ROOT_DIR=$(dirname $0)/..
cd $ROOT_DIR

if [[ $# -lt 1 ]]; then
    echo Usage: $0 PROJECT_ID [tests...]
    false
fi

project_id=$1
shift
targets=$*

[[ -n $GITHUB_RUN_NUMBER ]] && echo "Workflow run number $GITHUB_RUN_NUMBER" || true
if [[ -n `which rot13` ]]; then
   # Project is provided as a secret, so obfuscate to prevent redactions in server-side logs.
   echo 'Using target project (rot13):' $(echo $project_id | rot13)
else
   echo 'Using target project:' $project_id
fi
echo Testing sequencer with UDMI_REGISTRY_SUFFIX: $UDMI_REGISTRY_SUFFIX

site_path=sites/udmi_site_model
device_id=AHU-1
device_out_base=$site_path/out/devices/$device_id
test_out_base=$device_out_base/tests
rm -rf $test_out_base
mkdir -p $test_out_base out/

serial_no=sequencer-$RANDOM
echo Using pubber with serial $serial_no

PUBBER_OUT=pubber.out

pids=`ps ax | fgrep pubber | fgrep java | awk '{print $1}'`
if [[ -n $pids ]]; then
    echo Killing pubber pids $pids
    kill $pids
fi

bin/clone_model # Clone, and check that version is correct.

bin/augment_metadata $site_path $device_id

bin/reset_config $site_path $project_id $device_id

# Clean out the persistant data store to ensure a clean state each time.
rm -rf sites/udmi_site_model/out/devices/AHU-1/persistent_data.json

pubber/bin/build

echo Writing pubber output to $PUBBER_OUT
echo bin/pubber $site_path $project_id $device_id $serial_no
bin/pubber $site_path $project_id $device_id $serial_no > $PUBBER_OUT 2>&1 &

WAITING=10
for i in `seq 1 $WAITING`; do
    if fgrep "Connection complete" $PUBBER_OUT; then
        break
    fi
    echo Waiting for pubber startup $((WAITING - i))...
    sleep 2
done

if [[ $i -eq $WAITING ]]; then
    echo pubber startup failed:
    cat $PUBBER_OUT
    false
fi

# Run all tests as part of the suite, in debug mode for fail-fast when things go wrong!
bin/sequencer -a -v $site_path $project_id $device_id $serial_no $targets 2>&1 | tee sequencer.out
echo Completed execution of sequencer test run.

pids=`ps ax | fgrep pubber | fgrep java | awk '{print $1}'`
if [[ -n $pids ]]; then
    echo Killing pubber pids $pids
    kill $pids
else
    echo No pubber pids found, likely due to premature termination: failing test run.
    false
fi

cp etc/sequencer.out out/  # Sace for later test/comparison
bin/sequencer_cache

echo Comparing diff out/sequencer.out etc/sequencer.out
diff -u out/sequencer.out etc/sequencer.out

cp docs/specs/sequences/generated.md out/  # Save for test/comparison later
bin/gencode_seq

echo Comparing diff out/generated.md docs/specs/sequences/generated.md
diff -u out/generated.md docs/specs/sequences/generated.md || (
    echo Run bin/gencode_seq to regenerate output, if necessary.
    false
    )

echo Done with base test_sequencer run.
