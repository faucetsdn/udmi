#!/bin/bash -e

# Force consistent sort order
export LC_ALL=C

ROOT_DIR=$(dirname $0)/..
cd $ROOT_DIR

if [[ $1 == 'clean' ]]; then
    shift
    clean_cache=y
fi

if [[ $1 == 'alpha' ]]; then
    shift
    # TODO: Make mode where it only runs tests that don't have results.
    seq_opts=-a
fi

if [[ $# -lt 1 ]]; then
    echo Usage: $0 [clean] [alpha] PROJECT_ID [tests...]
    false
fi

project_id=$1
shift
targets=$*

[[ -n $GITHUB_RUN_NUMBER ]] && echo "Workflow run number $GITHUB_RUN_NUMBER" || true
echo "Using target project=$project_id"
echo "Using UDMI_REGISTRY_SUFFIX=$UDMI_REGISTRY_SUFFIX"
echo "Using UDMI_ALT_REGISTRY=$UDMI_ALT_REGISTRY"

site_path=sites/udmi_site_model
device_id=AHU-1
output_file=$site_path/out/sequencer_$device_id.json
device_out_base=$site_path/out/devices/$device_id
test_out_base=$device_out_base/tests
rm -rf $test_out_base
mkdir -p $test_out_base out/

serial_no=sequencer-$RANDOM
echo Using pubber with serial $serial_no

PUBBER_OUT=pubber.out

pids=`ps ax | fgrep pubber | fgrep java | awk '{print $1}'`
if [[ -n $pids ]]; then
    echo Killing pubber pids $pids
    kill $pids
fi

bin/clone_model # Clone, and check that version is correct.

bin/reset_config $site_path $project_id $device_id

# Clean out the persistant data store to ensure a clean state each time.
rm -rf $site_path/out/devices/AHU-1/persistent_data.json

pubber/bin/build

echo Writing pubber output to $PUBBER_OUT
echo bin/pubber $site_path $project_id $device_id $serial_no
bin/pubber $site_path $project_id $device_id $serial_no > $PUBBER_OUT 2>&1 &

WAITING=10
for i in `seq 1 $WAITING`; do
    if fgrep "Connection complete" $PUBBER_OUT; then
        break
    fi
    echo Waiting for pubber startup $((WAITING - i))...
    sleep 2
done

if [[ $i -eq $WAITING ]]; then
    echo pubber startup failed:
    cat $PUBBER_OUT
    false
fi

# Augment the device metadata to that tests know what to expect...
bin/augment_metadata $site_path $device_id

# Run in debug mode for fail-fast when things go wrong!
bin/sequencer -v $seq_opts $site_path $project_id $device_id $serial_no $targets 2>&1 | tee out/sequencer.log
echo Completed execution of sequencer test run.

echo Checking reported cloud version info
jq .cloud_version.udmi_functions $output_file

pids=`ps ax | fgrep pubber | fgrep java | awk '{print $1}'`
if [[ -n $pids ]]; then
    echo Killing pubber pids $pids
    kill $pids
else
    echo No pubber pids found, likely due to premature termination: failing test run.
    false
fi

if [[ -n $clean_cache ]]; then
    echo Cleaning sequencer result cache...
    rm -rf validator/sequences
else
    bin/sequencer_cache

    echo Comparing diff out/sequencer.out etc/sequencer.out
    diff -u out/sequencer.out etc/sequencer.out
fi

cp docs/specs/sequences/generated.md out/  # Save for test/comparison later
bin/gencode_seq

echo Comparing diff out/generated.md docs/specs/sequences/generated.md
diff -u out/generated.md docs/specs/sequences/generated.md || (
    echo Run bin/gencode_seq to regenerate output, if necessary.
    false
)

echo Checking for duplication in out/sequencer.out and etc/sequencer_planning.txt
bin/test_sequencer_plan

echo Done with base test_sequencer run.
