#!/bin/bash -e

# Force consistent sort order
export LC_ALL=C

UDMI_ROOT=$(dirname $0)/..
cd $UDMI_ROOT

source etc/shell_common.sh

debug_opts=-v
seq_opts=
clean_cache=y
pubber_opts=
suffix=
out_check=y

if [[ $1 == 'noclean' ]]; then
    shift
    clean_cache=
fi

if [[ $1 == 'alpha' ]]; then
    shift
    seq_opts=-x
fi

if [[ $1 == 'nostate' ]]; then
    shift
    pubber_opts+=" noState"
    suffix=_nostate
fi

if [[ $1 == 'nocheck' ]]; then
    shift
    out_check=
fi

if [[ $1 == 'full' ]]; then
    shift
    debug_opts=
fi

if [[ $# -lt 1 ]]; then
    echo Usage: $0 [noclean] [alpha] [nostate] [full] PROJECT_ID [tests...]
    false
fi

project_id=$1
shift
targets=$*
if [[ -n $targets ]]; then
    clean_cache=
fi

[[ -n $GITHUB_RUN_NUMBER ]] && echo "Workflow run number $GITHUB_RUN_NUMBER" || true
echo "export TARGET_PROJECT=$project_id"
echo "export UDMI_REGISTRY_SUFFIX=$UDMI_REGISTRY_SUFFIX"
echo "export UDMI_ALT_REGISTRY=$UDMI_ALT_REGISTRY"
echo "export MATRIX_SHARD_COUNT=$MATRIX_SHARD_COUNT"
echo "export MATRIX_SHARD_INDEX=$MATRIX_SHARD_INDEX"

site_path=sites/udmi_site_model
device_id=AHU-1
site_out=$site_path/out
output_file=$site_out/sequencer_$device_id.json
device_out_base=$site_out/devices/$device_id
tests_out_base=$device_out_base/tests

if [[ -n $clean_cache ]]; then
    rm -rf out/ $site_path/out-seq $site_out
fi

mkdir -p out/ $tests_out_base/

serial_no=sequencer-$RANDOM
echo Using pubber with serial $serial_no

PUBBER_LOG=out/pubber.log

pids=`ps ax | fgrep pubber | fgrep java | awk '{print $1}'`
if [[ -n $pids ]]; then
    echo Killing pubber pids $pids
    kill $pids
fi

bin/clone_model # Clone, and check that version is correct.

bin/reset_config $site_path $project_id $device_id

# Clean out the persistant data store to ensure a clean state each time.
rm -rf $site_out/devices/${device_id}/persistent_data.json

pubber/bin/build

echo Writing pubber output to $PUBBER_LOG
echo bin/pubber $site_path $project_id $device_id $serial_no $pubber_opts
bin/pubber $site_path $project_id $device_id $serial_no $pubber_opts > $PUBBER_LOG 2>&1 &

WAITING=10
for i in `seq 1 $WAITING`; do
    if fgrep "Connection complete" $PUBBER_LOG; then
        break
    fi
    echo Waiting for pubber startup $((WAITING - i))...
    sleep 2
done

if [[ $i -eq $WAITING ]]; then
    echo pubber startup failed:
    cat $PUBBER_LOG
    false
fi

# Augment the device metadata to that tests know what to expect...
bin/augment_metadata $site_path $device_id $pubber_opts

# Run in debug mode for fail-fast when things go wrong!
echo bin/sequencer $debug_opts $seq_opts $site_path $project_id $device_id $serial_no $targets
bin/sequencer $debug_opts $seq_opts $site_path $project_id $device_id $serial_no $targets
echo Completed execution of sequencer test run.

echo Reported cloud version info: $(jq .cloud_version.udmi_ref $output_file)

echo Combining partial-run output files...
files=$(cd out; ls -1 *.out *.log)
echo Merging $files
for file in $files; do
    cat out/$file >> out/$file.combined
    cp out/$file.combined out/$file
done

pids=`ps ax | fgrep pubber | fgrep java | awk '{print $1}'`
if [[ -n $pids ]]; then
    echo Killing pubber pids $pids
    kill $pids
else
    echo No pubber pids found, likely due to premature termination: failing test run.
    false
fi

echo Sanity check for completed tests...
target_count=$(fgrep "Running target" out/sequencer.log | wc -l)
result_count=$(cat out/sequencer.out | wc -l)
if [[ $target_count != $result_count ]]; then
    fail Only $result_count results found for expected $target_count targets.
fi

echo Checking for correctness of completed tests...
while read result; do
    fgrep "$result" etc/sequencer${suffix}.out ||
        fail Expected result not found for $result
done < out/sequencer.out

if [[ -n $out_check && -z $targets ]]; then
    if [[ -n $clean_cache ]]; then
        echo Cleaning sequencer result cache...
        rm -rf validator/sequences
    fi

    bin/test_sequcheck $suffix
elif [[ -n $MATRIX_SHARD_COUNT ]]; then
    echo Preparing stuff for shard reconcilliation
    mkdir -p $site_path/out-seq
    rsync -ah $site_path/out/ $site_path/out-seq/
    rm -rf $site_path/out
fi

echo Done with $suffix test_sequencer run.
