#!/bin/bash

export VALIDATOR_CONFIG=/tmp/validator_config.json

ROOT_DIR=$(realpath $(dirname $0)/..)
cd $ROOT_DIR

if [[ $# != 0 ]]; then
    echo Usage: $0 [-n]
    false
fi

echo Parsing $VALIDATOR_CONFIG:
cat $VALIDATOR_CONFIG
project_id=`jq -r .project_id $VALIDATOR_CONFIG`
site_model=`jq -r .site_model $VALIDATOR_CONFIG`
device_id=`jq -r .device_id $VALIDATOR_CONFIG`
serial_no=`jq -r .serial_no $VALIDATOR_CONFIG`
echo Target project $project_id
echo Site model $site_model
echo Target device $device_id
echo Device serial $serial_no

awc=$(echo $project_id $site_model $device_id $serial_no | wc -w)
if [[ $awc != 4 ]]; then
    echo Missing configuration paramaters.
    exit -1
fi

EXPECTED_SEQUENCES=2

validator/bin/build

JARFILE=validator/build/libs/validator-1.0-SNAPSHOT-all.jar
JAVA_CMD="java -cp $JARFILE org.junit.runner.JUnitCore"

rm -rf out/devices/$device_id

exit_code=0
for test_class in ConfigValidator WritebackValidator; do
    CLASS=com.google.daq.mqtt.validator.validations.$test_class
    echo $JAVA_CMD $CLASS
    timeout 5m $JAVA_CMD $CLASS
    result=$?

    if [[ $result != 0 ]]; then
        echo Sequence test $test_class exited with error code $result
        exit_code=$result
    fi
done

echo Done with test sequence execution, exit $exit_code.
exit $exit_code
