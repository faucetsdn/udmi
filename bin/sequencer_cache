#!/bin/bash -e
#
# Utility to update cached sequence runs into the canonical git repository.
# Automatically run from bin/test_sequencer, but can be done manually as needed.
#
# Live updates are taken from the default path for bin/test_sequencer:
#   sites/udmi_site_model/out/devices/AHU-1
#
# Cached results are managed in validator/sequences/
#
# Doesn't properly handle the case of a test going away.
#
# The cache update algortihm relies on detecting changes to the generated.md file,
# focusing on providing stability for bin/gencode_seq when needed.
#

ROOT_DIR=$(realpath $(dirname $0)/..)
cd $ROOT_DIR
TEST_LIST=out/sequencer_tests.txt
RESULT_OUT=out/sequencer.out
SCHEMA_OUT=out/schema_validation.out
CACHE_ROOT=validator/sequences
TEST_ROOT=sites/udmi_site_model/out/devices/AHU-1

# Fix sort order difference on different platforms.
export LC_ALL=C

mkdir -p $CACHE_ROOT
find $CACHE_ROOT/ -name sequencer.log | xargs fgrep -H RESULT | awk '{print $7}' > $TEST_LIST
find $TEST_ROOT/ -name sequencer.log | xargs fgrep -H RESULT | awk '{print $7}'>> $TEST_LIST
sort < $TEST_LIST | uniq | sponge $TEST_LIST
all_tests=$(cat $TEST_LIST)
rm -f $RESULT_OUT $SCHEMA_OUT

for test in $all_tests; do
    src_dir=$TEST_ROOT/tests/$test
    cache_dir=$CACHE_ROOT/$test/
    if ! test -f $src_dir/sequence.md; then
        echo Missing $src_dir/sequence.md
    elif diff -q $src_dir/sequence.md $cache_dir/sequence.md; then
        echo Unchanged $cache_dir
        cp $src_dir/sequencer.log $cache_dir/sequencer.log
    else
        echo Updating $cache_dir from $src_dir...
        rm -rf $cache_dir
        cp -a $src_dir $(dirname $cache_dir)
        ls -l $src_dir/sequence.md $cache_dir/sequence.md
    fi

    fgrep RESULT $cache_dir/sequencer.log | sed -e 's/.*sequence RESULT/RESULT/' >> $RESULT_OUT
    fgrep SCHEMA $cache_dir/sequencer.log | sed -e 's/.*sequence SCHEMA/SCHEMA/' >> $SCHEMA_OUT
done

sort -k 3 < $RESULT_OUT | fgrep -v " DISABLED " | sponge $RESULT_OUT
sort -k 3 < $SCHEMA_OUT | fgrep -v " DISABLED " | sponge $SCHEMA_OUT

function check_schemas {
    stage=$1
    STAGE=${stage^^}
    pass=$(fgrep "SCHEMA pass " $SCHEMA_OUT | fgrep " $STAGE " | awk '{ print $6 }')
    fail=$(fgrep -v "SCHEMA pass " $SCHEMA_OUT | fgrep " $STAGE " | awk '{ print $6 }')
    if [[ -n $fail ]]; then
        result=fail
        message="Failing schema validations"
    elif [[ -n $pass ]]; then
        result=pass
        message="All messages passed validation"
    else
        result=skip
        message="No matching schema results found"
    fi
    echo RESULT $result schemas schema_$stage $STAGE 5 $message in $SCHEMA_OUT >> $RESULT_OUT
}

check_schemas alpha
check_schemas beta
check_schemas stable

echo
echo Resulting $RESULT_OUT:
cat $RESULT_OUT

echo
echo Done with test cache update of $CACHE_ROOT, generated $RESULT_OUT
