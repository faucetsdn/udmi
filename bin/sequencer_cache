#!/bin/bash -e
#
# Utility to update cached sequence runs into the canonical git repository.
# Automatically run from bin/test_sequencer, but can be done manually as needed.
#
# Live updates are taken from the default path for bin/test_sequencer:
#   sites/udmi_site_model/out/devices/AHU-1
#
# Cached results are managed in validator/sequences/
#
# Doesn't properly handle the case of a test going away.
#
# The cache update algortihm relies on detecting changes to the generated.md file,
# focusing on providing stability for bin/gencode_seq when needed.
#

RUNDIR=$PWD
UDMI_ROOT=$(realpath $(dirname $0)/..)
cd $UDMI_ROOT

source etc/shell_common.sh

mkdir -p $RUNDIR/out
TEST_LIST=$RUNDIR/out/sequencer_tests.txt
RESULT_OUT=$RUNDIR/out/sequencer.out
CACHE_ROOT=validator/sequences
TEST_ROOT=$RUNDIR/sites/udmi_site_model/out/devices/AHU-1
ARCHIVE_ROOT=/tmp/$CACHE_ROOT

function usage(){
    echo "Usage: $0 [OPTION]"
    echo
    echo "-u Update sequencer cache from test root"
    echo "-t Test sequencer cache against test root"
    echo "-a Archive sequencer cache"
    echo "-x Validate archived sequencer cache against test root"
    echo "-i PATH Import sequencer cache from Github Actions artifact"
    exit 1
}

if [[ $# == 0 ]]; then
    usage
fi

update=
archive=
validate_saved=
validate_archive=
import_cache=

while getopts "i:auxt" opt; do
    case $opt in
        a)
            archive=1
            ;;
        u)
            update=1
            ;;
        t)
            validate_saved=1
            ;;
        x)
            validate_archive=1
            ;;
        i)
            import_cache=1
            github_artifact="$OPTARG"
            ;;
        \?)
            usage
            ;;
    esac
done

if [[ -n $update ]]; then
    mkdir -p $CACHE_ROOT
    find $CACHE_ROOT/ -name sequencer.log | xargs fgrep -H RESULT | awk '{print $6}' > $TEST_LIST
    find $TEST_ROOT/ -name sequencer.log | xargs fgrep -H RESULT | awk '{print $6}'>> $TEST_LIST
    sort < $TEST_LIST | uniq | sponge $TEST_LIST
    all_tests=$(cat $TEST_LIST)
    rm -f $RESULT_OUT

    for test in $all_tests; do
        src_dir=$TEST_ROOT/tests/$test
        cache_dir=$CACHE_ROOT/$test
        if ! test -f $src_dir/sequence.md; then
            echo Missing $src_dir/sequence.md
        elif diff -q $src_dir/sequence.md $cache_dir/sequence.md; then
            echo Unchanged $cache_dir
        else
            echo Updating $cache_dir from $src_dir...
            rm -rf $cache_dir
            cp -a $src_dir $(dirname $cache_dir)
            ls -l $src_dir/sequence.md $cache_dir/sequence.md
        fi

        fgrep RESULT $cache_dir/sequencer.log | sed -e 's/.*NOTICE RESULT/RESULT/' >> $RESULT_OUT
    done

    sort -k 3 < $RESULT_OUT | fgrep -v " DISABLED " | sponge $RESULT_OUT

    echo
    echo Resulting $RESULT_OUT:
    cat $RESULT_OUT

    echo
    echo Done with test cache update of $CACHE_ROOT, generated $RESULT_OUT
fi

if [[ -n $validate_saved ]]; then
    echo Verifying sequencer cache against generated files
    ls -1 $TEST_ROOT/tests/ \
        | xargs -I% diff -u \
            $TEST_ROOT/tests/%/sequence.md \
            $CACHE_ROOT/%/sequence.md
    ls $CACHE_ROOT/ > out/cached_sequences.out
    ls $TEST_ROOT/tests/ > out/device_sequences.out
    diff -u out/cached_sequences.out out/device_sequences.out || fail Unexpected difference with cached results.
fi

if [[ -n $archive ]]; then
    echo Cleaning sequencer result cache...
    echo A backup can be found in $ARCHIVE_ROOT 
    rm -rf $ARCHIVE_ROOT && mkdir -p $ARCHIVE_ROOT
    mv $CACHE_ROOT/* $ARCHIVE_ROOT
fi 

if [[ -n $validate_archive ]]; then
    echo Verifying archived sequencer cache against generated files
    ls -1 $TEST_ROOT/tests/ \
        | xargs -I% diff -u \
            $TEST_ROOT/tests/%/sequence.md \
            $ARCHIVE_ROOT/%/sequence.md
    echo Verification successful    
fi

if [[ -n $import_cache ]]; then
    if ! [[ -f $github_artifact ]]; then
        echo "File $github_artifact not found"
        false
    fi
    echo "Updating sequencer cache from $github_artifact"
    TMP_DIR=/tmp/import_cache
    rm -rf $TMP_DIR && mkdir -p $TMP_DIR

    while read -r zipfile ; do
        mkdir -p $TMP_DIR/$zipfile
        unzip -p $github_artifact $zipfile | tar -zxC $TMP_DIR/$zipfile
        # there is one site model which is udmi_site_model-{prefix}
        unzip_path="$TMP_DIR/$zipfile"
        site_model_dir=$(ls -1 $unzip_path/sites| head -n 1)
        import_dir="$unzip_path/sites/$site_model_dir/out-seq/devices/AHU-1/tests"
        for directory in $import_dir/* ; do
            test_name=$(basename "$directory")
            if ! diff "$directory/sequence.md" "$CACHE_ROOT/$test_name/sequence.md" >/dev/null 2>&1; then
                echo Updating $test_name from $zipfile
                rm -rf "$CACHE_ROOT/$test_name/"
                cp -r "$directory" "$CACHE_ROOT/$test_name"
            fi
        done
    done < <(zipinfo -1 $github_artifact | grep sequencer)
    exit
    IMPORT_DIR="$TMP_DIR/$TEST_ROOT/tests"
    echo Completed update
fi
