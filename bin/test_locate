#!/bin/bash -e

function locate_help {
    echo To clean config directories and stop-at-first-failure, use:
    echo
    echo $0 trial
    echo
    false
}


ROOT=$(realpath $(dirname $0)/..)
cd $ROOT

trial_run=
if [[ $1 == trial ]]; then
    trial_run=true
    shift
fi

failures=$(mktemp)
working=$(mktemp)

function test_locate {
    udmi locate $2 > $working 2>&1 || true
    profile=$(echo $(fgrep profile: $working | cut -d: -f2))
    site_model=$(echo $(fgrep site_model: $working | cut -d: -f2))
    if [[ -n $4 && $4 != null ]]; then
        expected_site=$(realpath --relative-base $PWD $ROOT/$4)
    else
        expected_site=$4
    fi
    if [[ $profile == $3 && $site_model == $expected_site ]]; then
        result=PASS
    else
        result=FAIL
        config_files=$(cd $ROOT; find $HOME/.udmi $ROOT/sites/udmi_site_model/.udmi -name \*.json 2>/dev/null)
        echo "$1: udmi locate $2" >> $failures
        echo "  working directory: " $PWD >> $failures
        echo "  config files:" $config_files >> $failures
        echo "  profile expected:" $3 was $profile >> $failures
        echo "  site_model expected:" $expected_site was $site_model >> $failures
    fi
    echo $result $1
    if [[ -n $trial_run && $result != PASS ]]; then
        echo ======================
        cat $working
        echo ======================
        cat $failures
        echo ======================
        return 1
    fi
}

# Make sure udmi is in the path.
export PATH=$ROOT/bin:$PATH

SITE_PATH=sites/udmi_site_model
USER_DEFAULT=$HOME/.udmi/default_profile.json
PROFILE_TEMPLATE=$ROOT/out/default_profile.json
mkdir -p ${PROFILE_TEMPLATE%/*.json}
cat <<EOF > $PROFILE_TEMPLATE
{
  "site_model": "$ROOT/$SITE_PATH"
}
EOF

if [[ -n $trial_run ]]; then
    echo Cleaning config directories...
    rm -rf $HOME/.udmi $ROOT/$SITE_PATH/.udmi
fi

[[ ! -d $ROOT/$SITE_PATH ]] && (echo $ROOT/$SITE_PATH not found, check your setup. && false)
[[ -d $HOME/.udmi ]] && (echo $HOME/.udmi exists; locate_help)
[[ -d $ROOT/$SITE_PATH/.udmi ]] && (echo $ROOT/$SITE_PATH/.udmi exists; locate_help)

rm -rf   $HOME/.udmi $ROOT/$SITE_PATH/.udmi
mkdir -p $HOME/.udmi $ROOT/$SITE_PATH/.udmi

cp $PROFILE_TEMPLATE $USER_DEFAULT
cp $PROFILE_TEMPLATE $HOME/.udmi/profile_foo.json

cd $HOME
echo Testing from $PWD

test_locate default_site "" .udmi/default_profile.json $SITE_PATH
test_locate user_profile foo .udmi/profile_foo.json $SITE_PATH
test_locate user_missing bar "" ""

echo Remove user default profile...
rm -f $HOME/.udmi/default_profile.json

test_locate default_missing "" .udmi/default_profile.json null

echo Create empty user default profile...
echo {} > $HOME/.udmi/default_profile.json

test_locate default_empty "" .udmi/default_profile.json null

cd $ROOT/$SITE_PATH
echo Testing from $PWD

echo Copying profiles to .udmi/
cp $PROFILE_TEMPLATE .udmi/
cp $PROFILE_TEMPLATE .udmi/profile_bar.json

test_locate site_default "" .udmi/default_profile.json $SITE_PATH
test_locate site_missing foo $HOME/.udmi/profile_foo.json $SITE_PATH
test_locate site_profile bar .udmi/profile_bar.json $SITE_PATH
test_locate site_nothing baz "" ""

echo Cleanup .udmi directories...
rm -rf $HOME/.udmi $ROOT/$SITE_PATH/.udmi

if [[ -n $(cat $failures) ]]; then
    echo Test failures:
    cat $failures
    false
fi

echo Done with locate tests.
rm -f $failures
