#!/bin/bash -e

ROOT=$(dirname $0)/..
cd $ROOT

errorfile=`mktemp`
rm -f $errorfile

build=y
force=n

schemadir=schema
sitesdir=tests/sites

while getopts "d:" opt; do
    case $opt in
        d)
            sitesdir=${OPTARG}
            ;;
        \?)
            echo "Usage: $0 [-d TEST_DATA_DIR]"
            exit -1
            ;;
    esac
done

shift $((OPTIND-1))

function redact_files {
    for file in $@; do
        if [[ $(basename $file) == exceptions.txt ]]; then
            rm $file
            continue
        fi
        sed -E -i \
            -e 's-"udmi_version" : ".*"$-udmi_version REDACTED-' \
            -e 's-oading .*udmi/tests/-REDACTED/-' \
            -e 's-^    .*udmi/tests/-    REDACTED/-' \
            $file
    done
}

if [[ $# == 0 ]]; then
    subsets=$(cd $sitesdir; ls -d *)
    do_mock=y
else
    subsets=$*
fi

echo Testing against: $subsets

FAILURES=out/test_sites-failures
rm -f $FAILURES

for subset in $subsets; do
    echo '##########################################' Testing site $subset
    site_dir=$sitesdir/$subset
    devices_dir=$site_dir/devices
    rm -rf $devices_dir/*/out
    mkdir -p $devices_dir
    devices=$(cd $devices_dir; ls -d *)

    # Clean up some stuff that might be left over from unit testing.
    for device in $devices; do
        if [[ ! -f $devices_dir/$device/metadata.json ]]; then
            rm -rf $devices_dir/$device
        fi
    done

    # Test the direct config-file variant of registrar (no project spec)
    bin/registrar $site_dir/cloud_iot_config.json

    reg_file=$site_dir/registration_summary.json
    reg_out=$site_dir/out/registration_summary.json
    [[ -f $reg_file ]] || touch $reg_file
    redact_files $reg_out
    diffs=$(diff -q $reg_out $reg_file 2>&1) || true
    if [[ -n $diffs ]]; then
        cat <<< $diffs >> $FAILURES
        diff $reg_out $reg_file || true
    fi

    for device in $devices; do
        device_dir=$devices_dir/$device
        if [[ -d $device_dir/out ]]; then
            redact_files $device_dir/out/*
            diffs=$(diff -rq $device_dir/out $device_dir/expected 2>&1) || true
            if [[ -n $diffs ]]; then
                cat <<< $diffs >> $FAILURES
                diff -r $device_dir/out $device_dir/expected || true
            fi
        elif [[ -d $device_dir/expected ]]; then
            echo Missing output directory $device_dir/out
            false
        fi
    done

done

if [[ -s $FAILURES ]]; then
    echo
    echo :::::: Failures found, to fix execute $FAILURES:
    sed -i -E \
        -e 's/^Files (.*) and (.*) differ$/cp \1 \2/' \
        -e 's-^Only in (.*)/out: (.*)$-touch \1/expected/\2-' \
        -e 's-^Only in (.*)/expected: (.*)$-rm \1/expected/\2-' \
        -e 's-^diff: (.*)/expected: No such file or directory$-mkdir \1/expected-' \
        $FAILURES
    cat $FAILURES
    chmod +x $FAILURES
    false
fi

if [[ -n $do_mock ]]; then
    echo '#########################################' Testing simple mock sequencer...
    bin/sequencer tests/sites/downgrade/ -- DWN-2 system_mode_restart || true

    RESULTLOG=tests/sites/downgrade/out/devices/DWN-2/RESULT.log
    fgrep "RESULT fail system.mode system_mode_restart ALPHA " $RESULTLOG ||
        bin/fail unexpected output from $RESULTLOG
fi

echo
echo '#########################################' Done with site tests
