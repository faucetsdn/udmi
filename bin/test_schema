#!/bin/bash -e

ROOT=$(dirname $0)/..
cd $ROOT

schema_root=../schemas

errorfile=`mktemp`
rm -f $errorfile

build=y
force=n

schemadir=schema
datadir=$schemadir

while getopts "d:fn" opt; do
    case $opt in
        f) force=y
            ;;
        n) build=n
           ;;
        d) 
          datadir=${OPTARG}
          ;;
        \?) echo "Usage: $0 [-f] [-n] [-d TEST_DATA_DIR]"
            exit -1
            ;;
    esac
done

outroot=out
rm -rf $outroot

if [ "$build" == y ]; then
    validator/bin/build
fi

jarfile=$(realpath validator/build/libs/validator-1.0-SNAPSHOT-all.jar)

subsets=$(cd $datadir; ls -d *.tests)
for subset in $subsets; do
    if [ -z "$subset" ]; then
        echo Schema $schema has no .tests dirs.
        false
    fi
    schemaname=${subset%.tests}.json
    testfiles=$(cd $datadir/$subset; ls *.json)
    for testfile in $testfiles; do
        outfile=${testfile%.json}.out
        testdir=$datadir/$subset
        testpath=$testdir/$testfile
        expected=$testdir/$outfile
        outdir=$outroot/${testdir#${schema_root}/}
        mkdir -p $outdir
        output=$outdir/$outfile
        
        error=0
        if [[ "$datadir" == "$schemadir" ]]; then
          reltest=${testpath#$datadir/}
        else
          reltest=$(realpath $testpath)
        fi
        (cd $schemadir; java -jar $jarfile -- $schemaname files $reltest --) 2> $output || error=$?
        if [ $force == y ]; then
            diff $expected $output || echo Updating $expected && cp $output $expected
        else
            diff -b $expected $output || (echo '   ' cp $output $expected | tee -a $errorfile)
        fi
    done
done

echo

if [ -f $errorfile ]; then
    echo Validation errors found in $(pwd):
    cat $errorfile
    false
fi

echo Done with validation.
              
