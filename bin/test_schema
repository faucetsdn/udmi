#!/bin/bash -e

ROOT=$(dirname $0)/..
cd $ROOT

schema_root=../schemas

errorfile=`mktemp`
rm -f $errorfile

build=y
force=n
parallel=

schemadir=schema
testdir=tests

while getopts "d:s:fnp" opt; do
    case $opt in
        f)
            force=y
            ;;
        n)
            build=n
            ;;
        s)
            subsets=${OPTARG}
            ;;
        d)
            testdir=${OPTARG}
            ;;
        p)
            parallel=y
            ;;
        \?)
            echo "Usage: $0 [-p] [-f] [-n] [-d TEST_DATA_DIR] [-s TEST_SUBSET]"
            exit -1
            ;;
    esac
done

outroot=out
rm -rf $outroot

if [ "$build" == y ]; then
    validator/bin/build
fi

jarfile=$(realpath validator/build/libs/validator-1.0-SNAPSHOT-all.jar)

if [[ -n $parallel ]]; then
    echo ========================= Running validation tests in parallel...
fi

if [[ -z $subsets ]]; then
    subsets=$(cd $testdir; ls -d *.tests)
fi
if [[ -z $subsets ]]; then
    echo Schema $schema has no X.tests dirs.
    false
fi
echo Testing against $subsets
for subset in $subsets; do
    schemaname=${subset%.tests}.json
    testfiles=$(cd $testdir/$subset; ls *.json)
    for testfile in $testfiles; do
        outfile=${testfile%.json}.out
        testbase=$testdir/$subset
        testpath=$testbase/$testfile
        expected=$testbase/$outfile
        outdir=$outroot/${testbase#${schema_root}/}
        mkdir -p $outdir
        output=$outdir/$outfile

        if [[ ! -f $expected ]]; then
            echo Missing expected reference file $expected
            if [ $force == y ]; then
                touch $expected
            else
                echo '    ' touch $expected | tee -a $errorfile
                continue
            fi
        fi

        if [[ "$testbase" == "$schemadir" ]]; then
          reltest=${testpath#$testbase/}
        else
          reldir=$(realpath --relative-to $schemadir $testdir)
          reltest=$reldir:$(realpath --relative-to $testdir $testpath)
        fi
        (
            (cd $schemadir; java -jar -Dnashorn.args=--no-deprecation-warning $jarfile -- $schemaname files $reltest --) || true
            if [ $force == y ]; then
                diff $output $expected || echo Updating $expected && cp $output $expected
            else
                diff -b $output $expected || (echo '   ' diff $output $expected | tee -a $errorfile)
            fi
        ) &

        if [[ -z $parallel ]]; then
            wait
        fi
    done
done

if [[ -n $parallel ]]; then
    sleep 5
    echo ========================= Waiting for validation results...
    wait
fi

echo

if [ -f $errorfile ]; then
    echo Validation errors found in $(pwd):
    cat $errorfile
    false
fi

echo Done with validation.
