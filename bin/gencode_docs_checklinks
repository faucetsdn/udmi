#!/usr/bin/env python3
"""
Checks that inline markdown links in documentation and schema are valid

Prints any invalid links, otherwise quiet if all links are valid
"""
import glob
import re
import os
import sys

HOSTED_GITHUB_PAGES = r'^https?:\/\/faucetsdn\.github\.io\/udmi\/'
# pylint: disable-next=line-too-long
HOSTED_GITHUB = r'^https?:\/\/(?:www\.)?github\.com\/faucetsdn\/udmi\/(?:blob|tree)\/master\/'

def split_link_fragment(link):
  """ Splits a link into the path and the fragment.
    e.g. file.md#header is split into `file.md` and `#header`

    Arguments
      Link

    Returns tuple:
      file_path
      anchor    None if not defined
  """
  matches = re.search(r'^([^#]*)(#.*)?$', link)
  if not matches:
    raise ValueError
  return matches.groups()



def blank_regex_substitutions(string, *args):
  """
    Applies multiple blank regex substitutions on a string and returns the
    result

    Arguments
      string to substitute in
      *args regex for substitution

    Returns
      string with all regex substitutions applied
  """
  for regex in args:
    string = re.sub(regex, '', string)
  return string


def check_links(file_path):
  """
    Checks if inline markdown links within the given file_path resolve to a
    valid file or directory, or to a hosted (Github or Github Pages) copy of
    the repository

    Arguments:
      file_path:  file to check links within

    Returns:
      list of links which did not resolve
  """

  failing_links = []

  with open(file_path, 'r', encoding='utf-8') as f:
    file_data = f.read()
    if file_path.endswith('.md'):
      file_lines = file_data.split('\n', 2)
      # TODO: Make this more comprehensive and check actual path.
      if not re.search(r'^\[\*\*UDMI.*\]\(\#\)$', file_lines[0]):
        failing_links.append((file_path, 'header', file_lines[0]))
      if file_lines[1]:
        failing_links.append((file_path, 'missing blank', ''))
    links = re.findall(r'\[(?:[^\]]*)\]\(([^\)]*)\)', file_data)
    for link in links:

      if not re.search('^https?://', link):
        # function returns a tuple and link anchor not currently needed
        # pylint: disable-next=unused-variable
        link_path, link_anchor = split_link_fragment(link)
        dir_name = os.path.dirname(os.path.realpath(file_path))

        # Links are relative to the file they were found in
        resolved_path = os.path.realpath(os.path.join(dir_name, link_path))

        if not os.path.exists(resolved_path):
          failing_links.append((file_path, 'link', resolved_path))
      else:
        # Rewrite hosted links (e.g. github pages) to local by
        # subtracting the web host
        rewritten_link = blank_regex_substitutions(link,
            HOSTED_GITHUB,
            HOSTED_GITHUB_PAGES)

        if not re.search('^https?://', rewritten_link):
          # The modified link now directs to a local path
          resolved_path = os.path.realpath(rewritten_link)
          # Append .md to any files without extensions
          # (assumed from github pages links)
          root, ext = os.path.splitext(resolved_path)
          if not ext and not os.path.isdir(root):
            resolved_path = f'{resolved_path}.md'

          if not os.path.exists(resolved_path):
            failing_links.append((file_path, 'link', link))

  return failing_links


def main():
  check_paths = ['*.md', 'docs/**/*.md', 'schema/*.json', 'udmif/**/*.md']
  error = False
  for check_path in check_paths:
    file_paths = glob.glob(check_path, recursive=True)
    for file_path in file_paths:
      invalid_tuples = check_links(file_path)
      if invalid_tuples:
        error = True
        for invalid_tuple in invalid_tuples:
          print(f'** {invalid_tuple[0]} {invalid_tuple[1]} {invalid_tuple[2]}')
  return error

if __name__ == '__main__':
  result = main()
  if result:
    sys.exit(1)
