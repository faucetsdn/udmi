#!/bin/bash -e

CONFIG_FILE=validator_config.json

pubber=y
if [[ $1 == -n ]]; then
    pubber=
    shift
fi

if [[ $# != 0 ]]; then
    echo Usage: $0 [-n]
    false
fi

project_id=`jq -r .project_id $CONFIG_FILE`
site_model=`jq -r .site_model $CONFIG_FILE`
device_id=`jq -r .device_id $CONFIG_FILE`
serial_no=`jq -r .serial_no $CONFIG_FILE`
echo Target project $project_id
echo Site model $site_model
echo Target device $device_id
echo Device serial $serial_no

awc=$(echo $project_id $site_model $device_id $serial_no | wc -w)
if [[ $awc != 4 ]]; then
    echo Missing configuration paramaters.
    false
fi

PUBBER_OUT=pubber.out
EXPECTED_SEQUENCES=2

if [[ -n $pubber ]]; then
    pids=`ps ax | fgrep pubber | fgrep java | awk '{print $1}'`
    if [[ -n $pids ]]; then
        echo Killing pubber pids $pids
        kill $pids
    fi
    echo Writing pubber output to $PUBBER_OUT
    echo bin/pubber $site_model $project_id $device_id $serial_no
    bin/pubber $site_model $project_id $device_id $serial_no > $PUBBER_OUT 2>&1 &

    while ! fgrep "Connection complete" $PUBBER_OUT; do
        echo Waiting for pubber startup...
        sleep 5
    done
fi

validator/bin/build

JARFILE=validator/build/libs/validator-1.0-SNAPSHOT-all.jar
JAVA_CMD="java -cp $JARFILE org.junit.runner.JUnitCore"

rm -rf out/devices/$device_id
echo $JAVA_CMD com.google.daq.mqtt.validator.validations.BaselineValidator
timeout 120s $JAVA_CMD com.google.daq.mqtt.validator.validations.BaselineValidator

if [[ -n $pubber ]]; then
    pids=`ps ax | fgrep pubber | fgrep java | awk '{print $1}'`
    echo Killing pubber pids $pids
    kill $pids
fi

echo Done with test sequence execution.
