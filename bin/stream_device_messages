#!/usr/bin/env python3
"""
Live stream a GCP Pub/Sub Subscription, and filter messages to a given device
in a site 

Usage:
  bin/stream_device_messages PROJECT_ID SUBSCRIPTION_NAME SITE_PATH DEVICE_ID

Note:
  - DEVICE_ID and SITE_PATH are case sensitive
  - Cannot be used with any concurrent invocations of this tool or other 
    use of the subscription (e.g. using bin/validator with a subscription)
"""
import datetime
import json
import sys
import argparse
import os

from google import auth
from google.cloud import pubsub_v1
from google.cloud.pubsub_v1.types import SeekRequest


def subscribe_callback(message: pubsub_v1.subscriber.message.Message) -> None:
  if message.attributes.get('deviceId') != device_id or \
  message.attributes.get('deviceRegistryId') != registry_id:
    message.ack()
    return

  # Filter out messages which didn't originate from the device
  if message.attributes.get('subType') == 'state' and \
  message.attributes.get('subFolder') == 'update':
    message_type = 'state'
  elif 'subFolder' in message.attributes and \
    'subType' not in message.attributes:
    message_type = f'event_{message.attributes["subFolder"]}'
  else:
    message.ack()
    return

  print(f'{message.publish_time}: Recieved message {message_type} \n---')

  # Try to pretty-print messages
  try:
    message_json = json.loads(message.data)
    payload = json.dumps(message_json, indent=4)
  except Exception:
    payload = message.data.decode('utf-8')

  print(f'{payload}\n')
  message.ack()

def parse_command_line_args():
  parser = argparse.ArgumentParser()
  parser.add_argument('project', type=str)
  parser.add_argument('subscription', type=str)
  parser.add_argument('site_path', type=str)
  parser.add_argument('device_id', type=str)
  return parser.parse_args()


args = parse_command_line_args()
device_id = args.device_id
site_path = args.site_path

with open(os.path.join(site_path, 'cloud_iot_config.json'), encoding="utf-8") as f:
  cloud_iot_config = json.load(f)

registry_id = cloud_iot_config['registry_id']

if not registry_id:
  print("Registry ID not set")
  sys.exit(1)

if not os.path.exists(os.path.join(site_path,'devices', device_id)):
  print(f'Device {device_id} not found in site model')
  sys.exit(1)

try:
  credentials, project_id = auth.default()
except Exception as e:
  print(e)
  sys.exit(1)

subscription = f'projects/{args.project}/subscriptions/{args.subscription}'
subscriber = pubsub_v1.SubscriberClient(credentials=credentials)

time_now = datetime.datetime.now()

request = SeekRequest(
  subscription = subscription,
  time = time_now
)

print(f'Seeking subscription to {time_now}')
response = subscriber.seek(request=request)

future = subscriber.subscribe(subscription, subscribe_callback)
print(f'Subscribing to messages from {device_id} in registry {registry_id}')

while True:
  try:
    future.result(timeout=5)
  except KeyboardInterrupt:
    future.cancel()
    future.result()
    break
  except Exception:
    continue
