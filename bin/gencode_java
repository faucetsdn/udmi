#!/bin/bash -e

source etc/shell_common.sh

JVERSION=1.2.1
JBASENAME=jsonschema2pojo
MARKER=/tmp/.gencode_mark

ROOT_DIR=$(realpath $(dirname $0)/..)
cd $ROOT_DIR

rm -rf gencode/java codegen/java
mkdir -p codegen gencode

bin/gencode_categories
bin/gencode_buckets

OUTDIR=$ROOT_DIR/gencode/java
cd codegen
GENDIR=$PWD

JARVER=$JBASENAME-$JVERSION
JARBIN=$GENDIR/$JARVER/bin/$JBASENAME

if [[ ! -f $JARBIN ]]; then
    curl -L https://github.com/joelittlejohn/$JBASENAME/releases/download/$JARVER/$JARVER.tar.gz -o $JARVER.tgz
    tar -xzvf $JARVER.tgz
fi

ls -l $JARBIN
cd $ROOT_DIR/schema

find . -name \*~ | xargs -r rm

JOPTS="-d . -ds -dg -S -p udmi.schema -ut"
echo Generating code in $OUTDIR
$JARBIN $JOPTS -N --source . --target $OUTDIR

# There is no way to specify enum constants in generated code, so just hack it in manually.
echo Copying shared constants $ROOT_DIR/etc/*.java
cp -u $ROOT_DIR/etc/*.java $OUTDIR/udmi/schema/

rm -f $MARKER
while [[ ! -f $MARKER ]]; do
    touch $MARKER
    echo Pruning dangling __ classes...
    dups=$(find $OUTDIR -name \*__\*.java)
    for file in $dups; do
        class=${file##*/}
        class=${class%.java}
        matches=$(fgrep -l $class -r $OUTDIR | fgrep -v $class.java) || true
        echo $class in $matches
        [[ -n $matches ]] || rm -f $file $MARKER
    done
done

echo Cleaning up references to __ classes...
fgrep -l __ -r $OUTDIR | xargs -n 1 sed -E -i \
                               -e 's/__[0-9]+ \./\./g' \
                               -e 's/__[0-9]+//g'

echo Checking for mismatching class signatures...
rm -f $MARKER
dups=$(find $OUTDIR -name \*__\*.java)
for file in $dups; do
    base=${file%__1.java}.java
    versions=$(sha256sum $base $file | sort | awk '{print $1}' | uniq | wc -l)
    [[ $versions == 1 ]] || (
        echo
        echo Multiple $versions of $base found:
        ls -l $base $file
        echo
    )
done

echo Pruning all __ classes...
find $OUTDIR -name \*__\*.java | xargs rm

echo Done with java code generation.
