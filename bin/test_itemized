#!/bin/bash -e

UDMI_ROOT=$(dirname $0)/..
cd $UDMI_ROOT

source etc/shell_common.sh

if [[ $# != 1 && $# != 2 ]]; then
    echo Usage: $0 PROJECT_ID [target_index]
    false
fi
PROJECT_ID=$1
shift 1
TARGET_INDEX=${1-}

SITE_PATH=sites/udmi_site_model
DEVICE_ID=AHU-1
seq_opts=-v
serial_no=sequencer-$RANDOM

INPUT_FILE=etc/test_itemized.in
RESULTS_OUT=out/test_itemized.out
GOLDEN_FILE=etc/test_itemized.out
SCHEMA_ITEMIZED=out/schema_itemized.out
GOLDEN_SCHEMAS=etc/schema_itemized.out
AUGMENT_OPTS=out/augment_opts.txt

rm -rf out/*_itemized.out
mkdir -p out
echo > $AUGMENT_OPTS

echo "export TARGET_PROJECT=$PROJECT_ID"
echo "export UDMI_REGISTRY_SUFFIX=${UDMI_REGISTRY_SUFFIX:-}"
echo "export UDMI_ALT_REGISTRY=${UDMI_ALT_REGISTRY:-}"
echo "export MATRIX_SHARD_COUNT=${MATRIX_SHARD_COUNT:-}"
echo "export MATRIX_SHARD_INDEX=${MATRIX_SHARD_INDEX:-}"

pubber/bin/build
validator/bin/build

for device_id in AHU-1 GAT-123; do
    echo bin/keygen CERT $SITE_PATH/devices/$device_id
    bin/keygen CERT $SITE_PATH/devices/$device_id || true
done

test_index=1
while read -u 7 action test_name pubber_opts; do
    echo
    echo =============================================================
    test_marker=$(printf %02d $test_index)
    ((test_index++)) || true

    PUBBER_LOG=out/pubber.log-$test_marker
    SEQUENCER_LOG=out/sequencer.log
    SEQUENCER_OUT=out/sequencer.out
    SCHEMA_OUT=out/schema.out

    [[ -n $TARGET_INDEX && $action == TEST && $TARGET_INDEX != $test_marker ]] && continue

    if [[ $action == WITH ]]; then
        DEVICE_ID=$test_name
        echo $pubber_opts > $AUGMENT_OPTS
        echo Executing itemized tests as $DEVICE_ID with $pubber_opts
        continue
    elif [[ -z $action || $action =~ ^# ]]; then
        continue
    elif [[ $action != TEST ]]; then
        echo Unknown test action $action
        false
    fi

    if [[ -z ${MATRIX_SHARD_COUNT:-} || $((test_index % MATRIX_SHARD_COUNT)) == $MATRIX_SHARD_INDEX ]]; then
        echo Executing $test_name shard test index $test_marker
    else
        echo Skipping $test_name non-shard test index $test_marker
        continue
    fi

    echo itemized test $test_name $pubber_opts [$(< $AUGMENT_OPTS)]

    # Clean out the persistant data store to ensure a clean state each time.
    rm -rf sites/udmi_site_model/out/devices/AHU-1/persistent_data.json $SITE_PATH/out

    echo bin/reset_config $SITE_PATH $PROJECT_ID $DEVICE_ID
    bin/reset_config $SITE_PATH $PROJECT_ID $DEVICE_ID

    echo
    echo bin/pubber $SITE_PATH $PROJECT_ID $DEVICE_ID $serial_no $pubber_opts \> $PUBBER_LOG
    bin/pubber $SITE_PATH $PROJECT_ID $DEVICE_ID $serial_no $pubber_opts > $PUBBER_LOG 2>&1 &

    WAITING=20
    for i in `seq 1 $WAITING`; do
        if [[ -n $(fgrep "Connection complete" $PUBBER_LOG) ]]; then
            break
        fi
        sleep 1
    done

    if [[ $i -eq $WAITING ]]; then
        echo pubber startup failed:
        cat $PUBBER_LOG
        false
    fi

    echo
    echo bin/augment_metadata $SITE_PATH $DEVICE_ID $(< $AUGMENT_OPTS)
    bin/augment_metadata $SITE_PATH $DEVICE_ID $(< $AUGMENT_OPTS)

    echo bin/sequencer $seq_opts -s $serial_no $SITE_PATH $PROJECT_ID $DEVICE_ID $test_name
    bin/sequencer $seq_opts -s $serial_no $SITE_PATH $PROJECT_ID $DEVICE_ID $test_name

    echo Cleaning up pubber processes...
    (ps ax | fgrep pubber | fgrep java) || true
    kill $(ps ax | fgrep pubber | fgrep java | awk '{print $1}') || true
    sleep 2
    ! (ps ax | fgrep pubber | fgrep java) || (warn Unexpected lingering pubber processes, sleep more... && sleep 2)
    ! (ps ax | fgrep pubber | fgrep java) || fail Unexpected lingering pubber processes

    egrep "(RESULT|CPBLTY) [a-z]+ [a-z.]+ $test_name[^ ]* " $SEQUENCER_OUT | while read result; do
        echo $test_marker ${result/* NOTICE /} >> $RESULTS_OUT
    done

    mv $SEQUENCER_OUT $SEQUENCER_OUT-$test_marker
    mv $SEQUENCER_LOG $SEQUENCER_LOG-$test_marker

    rm -rf $SITE_PATH/out-$test_marker
    mv $SITE_PATH/out $SITE_PATH/out-$test_marker

    if [[ -s $SCHEMA_OUT ]]; then
        sed -e "s/^/$test_marker $test_name /" < $SCHEMA_OUT >> $SCHEMA_ITEMIZED
    else
        echo $test_marker $test_name >> $SCHEMA_ITEMIZED
    fi

done 7< $INPUT_FILE

[[ ! -f $RESULTS_OUT ]] && fail Not output file, likely no tests executed.

sed -E -i $RESULTS_OUT \
    -e 's/(Pipeline type event error: While processing message ).*/\1REDACTED/' \
    -e 's/ 202[-0-9T:]+Z / TIMESTAMP /g'

if [[ -z $TARGET_INDEX && -z ${MATRIX_SHARD_COUNT:-} ]]; then
    bin/test_itemcheck
else
    echo Checking for correctness of completed tests in $GOLDEN_FILE...
    while read result; do
        # Two ?s matches the printf %02d above.
        expected=${result/#?? /}
        fgrep "$expected" $GOLDEN_FILE || fail Expected result not found: $expected
    done < $RESULTS_OUT
fi

echo Done with itemized test run.
