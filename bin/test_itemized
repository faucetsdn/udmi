#!/bin/bash -e

ROOT_DIR=$(dirname $0)/..
cd $ROOT_DIR

if [[ $# != 1 && $# != 2 ]]; then
    echo Usage: $0 PROJECT_ID [target test]
    false
fi
PROJECT_ID=$1
shift 1
TARGET_TEST=$1

SITE_PATH=sites/udmi_site_model
DEVICE_ID=AHU-1
seq_opts=-v
serial_no=sequencer-$RANDOM

PUBBER_OUT=out/pubber.out
SEQUENCER_OUT=out/sequencer.out
RESULTS_OUT=out/test_itemized.out
GOLDEN_FILE=etc/test_itemized.out
SCHEMA_OUT=out/schema_itemized.out
GOLDEN_SCHEMAS=etc/schema_itemized.out
AUGMENT_OPTS=out/augment_opts.txt

echo "export TARGET_PROJECT=$PROJECT_ID"
echo "export UDMI_REGISTRY_SUFFIX=$UDMI_REGISTRY_SUFFIX"
echo "export UDMI_ALT_REGISTRY=$UDMI_ALT_REGISTRY"

rm -f $RESULTS_OUT $SEQUENCER_OUT $PUBBER_OUT $SCHEMA_OUT $AUGMENT_OPTS
mkdir -p out
touch $RESULTS_OUT $SEQUENCER_OUT $PUBBER_OUT $SCHEMA_OUT $AUGMENT_OPTS

pubber/bin/build
validator/bin/build

test_index=0
while read -u 7 action test_name remainder; do
    if [[ $action == TEST && -n $TARGET_TEST && $TARGET_TEST != $test_name ]]; then
        continue
    fi

    if [[ $action == WITH ]]; then
        echo $test_name $remainder > $AUGMENT_OPTS
    elif [[ -z $action || $action =~ ^# ]]; then
        true # skip blank lines and comments
    elif [[ $action != TEST ]]; then
        echo Unknown test action $action
        false
    fi

    pubber_opts=${remainder/RESULT*/}

    echo -n "$action $test_name $pubber_opts" >> $RESULTS_OUT

    if [[ $action != TEST ]]; then
        echo >> $RESULTS_OUT
        continue
    fi

    echo itemized test $test_name $pubber_opts [$(< $AUGMENT_OPTS)]

    # Clean out the persistant data store to ensure a clean state each time.
    rm -rf sites/udmi_site_model/out/devices/AHU-1/persistent_data.json

    echo bin/reset_config $SITE_PATH $PROJECT_ID $DEVICE_ID
    bin/reset_config $SITE_PATH $PROJECT_ID $DEVICE_ID

    echo
    echo bin/pubber $SITE_PATH $PROJECT_ID $DEVICE_ID $serial_no $pubber_opts \> $PUBBER_OUT
    bin/pubber $SITE_PATH $PROJECT_ID $DEVICE_ID $serial_no $pubber_opts > $PUBBER_OUT 2>&1 &

    WAITING=20
    for i in `seq 1 $WAITING`; do
        if [[ -n $(fgrep "Connection complete" $PUBBER_OUT) ]]; then
            break
        fi
        sleep 1
    done

    if [[ $i -eq $WAITING ]]; then
        echo pubber startup failed:
        cat $PUBBER_OUT
        false
    fi

    echo
    echo bin/augment_metadata $SITE_PATH $DEVICE_ID $(< $AUGMENT_OPTS)
    bin/augment_metadata $SITE_PATH $DEVICE_ID $(< $AUGMENT_OPTS)

    echo bin/sequencer $seq_opts $SITE_PATH $PROJECT_ID $DEVICE_ID $serial_no $test_name \> $SEQUENCER_OUT
    bin/sequencer $seq_opts $SITE_PATH $PROJECT_ID $DEVICE_ID $serial_no $test_name 2>&1 | tee $SEQUENCER_OUT

    kill $(ps ax | fgrep pubber | fgrep java | awk '{print $1}') || true

    result=$(grep -E -m 1 "RESULT [a-z]+ [a-z.]+ $test_name " $SEQUENCER_OUT)
    echo ${result/* NOTICE RESULT/RESULT} >> $RESULTS_OUT

    ((++test_index))
    mv $PUBBER_OUT $PUBBER_OUT-$(printf %02d $test_index)
    mv $SEQUENCER_OUT $SEQUENCER_OUT-$(printf %02d $test_index)

    echo =========== $test_name >> $SCHEMA_OUT
    cat out/schema.out >> $SCHEMA_OUT

    sleep 2

done 7< $GOLDEN_FILE

if [[ -z $TARGET_TEST ]]; then
    echo Comparing diff $RESULTS_OUT $GOLDEN_FILE
    diff -bu $RESULTS_OUT $GOLDEN_FILE

    echo Comparing diff $SCHEMA_OUT $GOLDEN_SCHEMAS
    uniq < $SCHEMA_OUT | sponge $SCHEMA_OUT
    diff -bu $SCHEMA_OUT $GOLDEN_SCHEMAS
fi
