#!/bin/bash -e

ROOT=$(realpath $(dirname $0)/..)

if [[ $# != 3 && $# != 4 ]]; then
    echo Usage: $0 SITE_DIR PROJECT_ID DEVICE_ID [CONFIG_FILE]
    false
fi

site_dir=$(realpath $1)
project_id=$2
device_id=$3
shift 3
REFLECTOR_CONFIG=/tmp/reflector_config.json

if [[ -n $UDMI_REGISTRY_SUFFIX ]]; then
    echo Using registry suffix $UDMI_REGISTRY_SUFFIX
    registry_suffix=\"$UDMI_REGISTRY_SUFFIX\"
else
    registry_suffix=null
fi

config_file=generated_config.json
if [[ -n $1 ]]; then
    config_file=$1
    shift
fi

cd ${ROOT}

dst_config=/tmp/${device_id}_config.json
src_config=${site_dir}/devices/${device_id}/out/$config_file
ls -l ${src_config}
now_date=$(python3 -c 'import datetime; print(datetime.datetime.utcnow().isoformat() + "Z")')
echo Setting config timestamp ${now_date}
jq < ${src_config} .timestamp=\"${now_date}\" |\
    jq .system.testing.sequence_name=\"${config_file%.json}\" > ${dst_config}

if [[ -n $project_id ]]; then
    quoted_id=\"${project_id##*/}\"
else
    quoted_id=null
fi

if [[ $project_id =~ ^// ]]; then
    sans_project=${project_id%/*}
    iot_provider=\"${sans_project#//}\"
else
    iot_provider=null
fi

echo Resetting device ${device_id} config...
echo Writing config to $REFLECTOR_CONFIG
cat <<EOF > $REFLECTOR_CONFIG
{
  "iot_provider": $iot_provider,
  "project_id": $quoted_id,
  "site_model": "$site_dir",
  "device_id": "$device_id",
  "registry_suffix": $registry_suffix
}
EOF

validator/bin/reflector $REFLECTOR_CONFIG update/config:${dst_config}
